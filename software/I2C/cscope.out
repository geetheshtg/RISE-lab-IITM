cscope 15 $HOME/FPGA_Tests_Risecreek_Rimo/Rimo/rimoTest/software/I2C               0000181488
	@eeprom_rw.c

1 
	~"i2c.h
"

2 
	~<°döt.h
>

3 
	~"wrôe_d©a.h
"

5 
uöçå_t
 
	$h™dÀ_å≠
(
uöçå_t
 
ˇu£
, uöçå_à
ïc
, uöçå_à
ªgs
[32])

7 
	`¥ötf
("\àTø∞Takí: cau£: %08xÉpc: %08x \n",
ˇu£
,
ïc
);

8 
	}
}

10 
	$maö
(){

11 
	`u¨t_öô
();

13 
	`¥ötf
("\tI2C: Starting Transaction\n");

15 
wrôebuf1
[2] = {0,0};

16 
wrôebuf
[258];

17 
wrôeD©a
 = 0x20;

18 
wrôebuf
[0] = 0;

19 
wrôebuf
[1] = 0;

20 
ªadbuf
[32];

21 
i
 = 0, 
j
 = 0, 
k
 = 2, 
°©us
=0;

22 
¶avóddr
 = 0xA0;

23 
ãmp
 = 0;

25 
	`¥ötf
("\t Start of Write Sequence into EEPROM -- Objective: LoadÅhe EEPROM with 16KB of Data\n");

26 if(
	`shakti_öô_i2c
())

28 
	`¥ötf
("\tSomething Wrong In Initialization\n");

32 
	`¥ötf
("\tIntilization Happened Fine\n");

35 
	`waô_f‹_bb
())

37 
	`¥ötf
("\tError in Waiting for BB\n");

47 
wrôeD©a
 = 0x20;

49 
j
 = 0; j < 16; ++j){

50 
	`¥ötf
("\àVÆuêbeög c›õd i†: %0x\n", 
wrôeD©a
);

51 
wrôebuf
[
k
++] = 
wrôeD©a
++;

54 
k
 = 2;

56 
	`¥ötf
("\tSëtög SœvêAddªs†: %d\n", 
i
);

57 
	`£t_i2c_shakti
(
i2c_d©a
,
¶avóddr
);

58 
	`¥ötf
("\tSlave Address set\n");

59 
ãmp
 = 
	`gë_i2c_shakti
(
i2c_d©a
);

60 
	`¥ötf
("\tSë sœvêaddªs†ªadágaö, which i†0x%x\n",
ãmp
);

61 if(
¶avóddr
 !()
ãmp
)

62 
	`¥ötf
("\tSomewhere something is wrong withÅhe controller - it is giving out someÑandomáddress -- Diagnose\n");

66 
	`i2c_°¨t
();

67 if(
	`shakti_£ndbyãs
(
wrôebuf1
, 2, 0,0) != 2)

69 
	`¥ötf
("\tSomething wrong in sending bytesÅo write -- Diagnose\n");

72 if(
	`shakti_£ndbyãs
(
wrôebuf
, 16, 1, 0) != 16){

73 
	`¥ötf
("\tSomething wrong in sending bytesÅo write -- Diagnose\n");

76 
	`waôf‹
(9000);

77 
wrôebuf
[0]++;

79 
	`waô_f‹_bb
())

81 
	`¥ötf
("\twaiting for bb-2\n");

85 
	`£t_i2c_shakti
(
i2c_d©a
,
¶avóddr
);

86 
	`i2c_°¨t
();

87 
	`¥ötf
("\tSlave Addr 2 set - This isÅo incrementÅhe memory counter inÅhe EEPROM\n");

88 
	`waô_f‹_pö
(&
°©us
))

90 
	`¥ötf
("\twaiting forÖin\n");

92 if(
	`shakti_£ndbyãs
(
wrôebuf1
, 2, 0,0)!=2)

94 
	`¥ötf
("\tSomething wrong in sending bytesÅo write -- Diagnose\n");

97 
	`waô_f‹_pö
(&
°©us
))

99 
	`¥ötf
("\twaiting forÖin-2\n");

101 
	`£t_i2c_shakti
(
i2c_d©a
,
¶avóddr
 + 1);

103 
	`waô_f‹_pö
(&
°©us
))

105 
	`¥ötf
("\twaiting forÖin-3\n");

108 if(
	`shakti_ªadbyãs
–
ªadbuf
, 16, 1)!= 16)

110 
	`¥ötf
("\tSomething wrong inÑeading bytes\n -- Diagnose");

118 
	}
}

	@i2c.c

24 
	~"i2c.h
"

26 #ifde‡
IGNORE_PRINTF


27 
	#¥ötf
(
fmt
, ...Ë(0)

	)

30 
	#wrôebyãs
 34

	)

31 
	#ªadbyãs
 32

	)

33 
	$maö
()

35 
	`¥ötf
("\tI2C: Starting Transaction\n");

36 
wrôebuf
[
wrôebyãs
];

37 
wrôebuf1
[2] = {0,0};

39 
¶avóddr
 = 160;

40 
ãmp
 = 0;

41 
ªadbuf
[
ªadbyãs
];

43 
i
;

44 
°©us
;

45 
d©a
 = 0xfa;

46 
i
 = 0; i < 
wrôebyãs
; i++) {

47 
wrôebuf
[
i
] = 
d©a
;

48 
d©a
++;

50 
wrôebuf
[0] = 0;

51 
wrôebuf
[1] = 0;

53 
	`¥ötf
("\tStart of Read/Write Test Sequence -- Objective : Generating Random Dataánd Writing it intoÅhe Microchip EEPROM BFMánd ReadingÅhe same\n");

54 
	`¥ötf
("\tRandom Write Data Generated - Whicháre\n");

56 
i
 = 0; i < 
wrôebyãs
; ++i) {

57 
	`¥ötf
("\tByã%d : 0x%x\n",
i
,
wrôebuf
[i]);

60 if(
	`shakti_öô_i2c
())

62 
	`¥ötf
("\tSomething Wrong In Initialization\n");

66 
	`¥ötf
("\tIntilization Happened Fine\n");

69 
	`waô_f‹_bb
())

71 
	`¥ötf
("\tError in Waiting for BB\n");

75 
	`¥ötf
("\tSetting Slave Address\n");

76 
	`£t_i2c_shakti
(
i2c_d©a
,
¶avóddr
);

77 
	`¥ötf
("\tSlave Address set\n");

78 
ãmp
 = 
	`gë_i2c_shakti
(
i2c_d©a
);

79 
	`¥ötf
("\tSë sœvêaddªs†ªadágaö, which i†0x%x\n",
ãmp
);

80 if(
¶avóddr
 !()
ãmp
)

81 
	`¥ötf
("\tSomewhere something is wrong withÅhe controller - it is giving out someÑandomáddress -- Diagnose\n");

82 
	`i2c_°¨t
();

83 if(
	`shakti_£ndbyãs
(
wrôebuf
, 
wrôebyãs
,1,0)!=writebytes){

84 
	`¥ötf
("\tSomething wrong in sending bytesÅo write -- Diagnose\n");

88 
	`¥ötf
("\tFirst-set of Data sent\n");

90 
	`waôf‹
(90000);

92 
	`waô_f‹_bb
())

94 
	`¥ötf
("\twaiting for bb-2\n");

96 
	`£t_i2c_shakti
(
i2c_d©a
,
¶avóddr
);

97 
	`i2c_°¨t
();

98 
	`¥ötf
("\tSlave Addr 2 set - This isÅo incrementÅhe memory counter inÅhe EEPROM\n");

99 
	`waô_f‹_pö
(&
°©us
))

101 
	`¥ötf
("\twaiting forÖin\n");

103 if(
	`shakti_£ndbyãs
(
wrôebuf1
, 2, 0,0)!=2)

105 
	`¥ötf
("\tSomething wrong in sending bytesÅo write -- Diagnose\n");

108 
	`waô_f‹_pö
(&
°©us
))

110 
	`¥ötf
("\twaiting forÖin-2\n");

112 
	`£t_i2c_shakti
(
i2c_d©a
,
¶avóddr
 + 1);

114 
	`waô_f‹_pö
(&
°©us
))

116 
	`¥ötf
("\twaiting forÖin-3\n");

118 if(
	`shakti_ªadbyãs
–
ªadbuf
, 
ªadbyãs
, 1)!=Ñeadbytes)

120 
	`¥ötf
("\tSomething wrong inÑeading bytes\n -- Diagnose");

123 
	`¥ötf
("\tPrintingÅheÑead bytes\n");

124 
i
=0;i<32;i++)

126 
	`¥ötf
("\tByã%d: 0x%x\n",
i
,
ªadbuf
[i]);

128 
i
=0;i<32;i++)

130 if(
ªadbuf
[
i
] !
wrôebuf
[i+2]){

131 
	`¥ötf
("\tByã†wrôã¿™dÑód d⁄'àm©chÉº‹áà%d\n",
i
);

132 
	`¥ötf
("\tWrôebu‡i†0x%x Ródbu‡i†0x%x",
wrôebuf
[
i
],
ªadbuf
[i]);

136 
	`¥ötf
("\tI2C Microchip EEPROM successfully writtenánd Read with 32 Bytes of Data -- Rejoice\n");

137 
	`¥ötf
("***** VinodÅhere isÖroblem in your I2C");

139 
	}
}

	@i2c.h

1 #i‚de‡
I2C_H


2 
	#I2C_H


	)

4 
	#ETIMEOUT
 -60

	)

5 
	#DEF_TIMEOUT
 60

	)

6 
	#ETIMEDOUT
 -80

	)

7 
	#ENXIO
 -82

	)

8 
	#EREMOTEIO
 -81

	)

10 
	#I2C_SHAKTI_PIN
 0x80

	)

11 
	#I2C_SHAKTI_ESO
 0x40

	)

12 
	#I2C_SHAKTI_ES1
 0x20

	)

13 
	#I2C_SHAKTI_ES2
 0x10

	)

14 
	#I2C_SHAKTI_ENI
 0x08

	)

15 
	#I2C_SHAKTI_STA
 0x04

	)

16 
	#I2C_SHAKTI_STO
 0x02

	)

17 
	#I2C_SHAKTI_ACK
 0x01

	)

19 
	#I2C_SHAKTI_INI
 0x40

	)

20 
	#I2C_SHAKTI_STS
 0x20

	)

21 
	#I2C_SHAKTI_BER
 0x10

	)

22 
	#I2C_SHAKTI_AD0
 0x08

	)

23 
	#I2C_SHAKTI_LRB
 0x08

	)

24 
	#I2C_SHAKTI_AAS
 0x04

	)

25 
	#I2C_SHAKTI_LAB
 0x02

	)

26 
	#I2C_SHAKTI_BB
 0x01

	)

28 
	#I2C_SHAKTI_START
 (
I2C_SHAKTI_PIN
 | 
I2C_SHAKTI_ESO
 | 
I2C_SHAKTI_STA
 | 
I2C_SHAKTI_ACK
)

	)

29 
	#I2C_SHAKTI_START_ENI
 (
I2C_SHAKTI_PIN
 | 
I2C_SHAKTI_ESO
 | 
I2C_SHAKTI_STA
 | 
I2C_SHAKTI_ACK
 | 
I2C_SHAKTI_START_ENI
)

	)

30 
	#I2C_SHAKTI_STOP
 (
I2C_SHAKTI_PIN
 | 
I2C_SHAKTI_ESO
 | 
I2C_SHAKTI_STO
 | 
I2C_SHAKTI_ACK
)

	)

31 
	#I2C_SHAKTI_REPSTART
 ( 
I2C_SHAKTI_ESO
 | 
I2C_SHAKTI_STA
 | 
I2C_SHAKTI_ACK
)

	)

32 
	#I2C_SHAKTI_REPSTART_ENI
 ( 
I2C_SHAKTI_ESO
 | 
I2C_SHAKTI_STA
 | 
I2C_SHAKTI_ACK
 | 
I2C_SHAKTI_REPSTART_ENI
)

	)

33 
	#I2C_SHAKTI_IDLE
 (
I2C_SHAKTI_PIN
 | 
I2C_SHAKTI_ESO
 | 
I2C_SHAKTI_ACK
)

	)

36 
	#I2C_SLAVE_ADDRESS
 0xA0

	)

39 
	#I2C0_BASE_ADDRESS
 0x11400

	)

42 
	#I2C_PRESCALE
 (
I2C0_BASE_ADDRESS
 + 0)

	)

43 
	#I2C_CONTROL
 (
I2C0_BASE_ADDRESS
 + 8)

	)

44 
	#I2C_DATA
 (
I2C0_BASE_ADDRESS
 + 0x10)

	)

45 
	#I2C_STATUS
 (
I2C0_BASE_ADDRESS
 + 0x18)

	)

46 
	#I2C_SCL
 (
I2C0_BASE_ADDRESS
 + 0x38)

	)

49 
	#I2C_TESTLED
 0x11400

	)

53 * 
	gi2c_c⁄åﬁ
 = (c⁄° *Ë
I2C_CONTROL
;

54 * 
	gi2c_d©a
 = (c⁄° *Ë
I2C_DATA
;

55 * 
	gi2c_°©us
 = (c⁄° *Ë
I2C_STATUS
;

56 * 
	gi2c_¥esˇÀ
 = (c⁄° *Ë
I2C_PRESCALE
;

57 * 
	gi2c_s˛
 = (c⁄° *Ë
I2C_SCL
;

58 * 
	gi2c_Àd
 = (c⁄° *Ë
I2C_TESTLED
;

60 
	#i2c_¥esˇÀ
 0x11400

	)

61 
	#i2c_c⁄åﬁ
 0x11408

	)

62 
	#i2c_d©a
 0x11410

	)

63 
	#i2c_°©us
 0x11418

	)

64 
	#i2c_s˛
 0x11438

	)

69 
	#ASM


	)

71 
	$gë_i2c_shakti
(*
addr
)

73 #ifde‡
ASM


75 
vÆ
;

77 
	`¥ötf
("\¿Thêaddªs†i†%p;", (*Ë
addr
);

78 
asm
 vﬁ©ûe("lb %0, 0(%1)" : "Ù" (
vÆ
Ë: "r" (*
addr
));

79  
vÆ
;

81  *
addr
;

83 
	}
}

85 
	$£t_i2c_shakti
(*
addr
, 
vÆ
)

87 #ifde‡
ASM


88 
	`¥ötf
("\¿Thêaddªs†i†%p; vÆue: %x", (*Ë
addr
, 
vÆ
);

89 
asm
 vﬁ©ûe("sb %0, 0(%1)" : : "r" (
vÆ
), "r" (*
addr
));

91 *
addr
 = 
vÆ
;

93 
	}
}

95 
	$waôf‹
(
£cs
) {

96 
time
 = 0;

97 
time
++ < 
£cs
);

98 
	}
}

100 
	$i2c_°¨t
()

102 
	`£t_i2c_shakti
(
i2c_c⁄åﬁ
, 
I2C_SHAKTI_START
);

103 
	}
}

105 
	$i2c_°¨t_íi
()

107 
	`£t_i2c_shakti
(
i2c_c⁄åﬁ
, 
I2C_SHAKTI_START
);

108 
	}
}

110 
	$i2c_ªp°¨t
()

112 
	`£t_i2c_shakti
(
i2c_c⁄åﬁ
, 
I2C_SHAKTI_REPSTART
);

113 
	}
}

115 
	$i2c_ªp°¨t_íi
()

117 
	`£t_i2c_shakti
(
i2c_c⁄åﬁ
, 
I2C_SHAKTI_REPSTART
);

118 
	}
}

120 
	$i2c_°›
()

122 
	`£t_i2c_shakti
(
i2c_c⁄åﬁ
, 
I2C_SHAKTI_STOP
);

123 
	}
}

126 
	$shakti_öô_i2c
()

128 
ãmp
 = 0;

129 
	`¥ötf
("\tI2C: InitializingÅhe Controller\n");

139 
	`£t_i2c_shakti
(
i2c_¥esˇÀ
,0x1F);

140 
ãmp
 = 
	`gë_i2c_shakti
(
i2c_¥esˇÀ
);

141 
	`£t_i2c_shakti
(
i2c_s˛
,0x91);

142 
ãmp
 = 
	`gë_i2c_shakti
(
i2c_s˛
);

145 if((
ãmp
 | 0x00) != 0x91){

146 
	`¥ötf
("\tClock inôüliz©i⁄ faûed WrôêVÆue: 0x91;Ñód VÆue: %02x\n", 
ãmp
);

147  -
ENXIO
;

150 
	`¥ötf
("\tClock successfully initalized\n");

156 
	`¥ötf
("\tSetting Control Register with 0x80 \n");

157 
	`£t_i2c_shakti
(
i2c_c⁄åﬁ
, 
I2C_SHAKTI_PIN
);

158 
	`¥ötf
("\tControl Register Successfully set \n");

161 
	`¥ötf
("\tReading Control Register \n");

162 
ãmp
 = 
	`gë_i2c_shakti
(
i2c_c⁄åﬁ
);

163 
	`¥ötf
("\tC⁄åﬁ Regi°î i†Wrôã¿wôh 0x%x \n", 
ãmp
);

165 if((
ãmp
 & 0x7f) != 0){

166 
	`¥ötf
("\tDevice Not Recognized\n");

167  -
ENXIO
;

170 
	`¥ötf
("\tWaiting forá specifiedÅime\n ");

171 
	`waôf‹
(900);

172 
	`¥ötf
("\tDone Waiting \n ");

175 
	`£t_i2c_shakti
(
i2c_c⁄åﬁ
, 
I2C_SHAKTI_IDLE
);

176 
ãmp
 = 
	`gë_i2c_shakti
(
i2c_°©us
);

177 
	`¥ötf
("\tSètu†Reg vÆuêi†: 0x%x \n",
ãmp
);

180 if(
ãmp
 !(
I2C_SHAKTI_PIN
 | 
I2C_SHAKTI_BB
)){

181 
	`¥ötf
("\tInitialization failed\n");

182  -
ENXIO
;

185 
	`¥ötf
("\tAll is wellÅill here \n");

187 
	`¥ötf
("\tI2C successfully initialized\n");

188 
	}
}

190 
	$waô_f‹_bb
()

193 
	`¥ötf
("\tIs bus busy?\n");

194 
timeout
 = 
DEF_TIMEOUT
;

195 
°©us
;

197 
°©us
 = 
	`gë_i2c_shakti
(
i2c_°©us
);

199 !(
°©us
 & 
I2C_SHAKTI_BB
Ë&& --
timeout
) {

200 
	`waôf‹
(10000);

201 
°©us
 = 
	`gë_i2c_shakti
(
i2c_°©us
);

204 i‡(
timeout
 == 0) {

205 
	`¥ötf
("\t Bus busy wait -Åimed out. Resetting\n");

206  
ETIMEDOUT
;

210 
	}
}

212 
	$waô_f‹_pö
(*
°©us
)

215 
timeout
 = 
DEF_TIMEOUT
;

217 *
°©us
 = 
	`gë_i2c_shakti
(
i2c_°©us
);

219 (*
°©us
 & 
I2C_SHAKTI_PIN
Ë&& --
timeout
) {

220 
	`waôf‹
(10000);

221 *
°©us
 = 
	`gë_i2c_shakti
(
i2c_°©us
);

224 i‡(
timeout
 == 0){

225 
	`¥ötf
("\tWait forÖinÅimed out\n");

226  
ETIMEDOUT
;

230 
	}
}

232 
	$shakti_£ndbyãs
–c⁄° *
buf
, 
cou¡
, 
œ°
, 
íi
)

234 
wrcou¡
, 
°©us
, 
timeout
;

235 
	`¥ötf
("\tStarting Write Transaction -- Did you createÅri1Çets for SDAánd SCL in verilog?\n");

236 
wrcou¡
=0; wrcou¡<
cou¡
; ++wrcount) {

237 
	`£t_i2c_shakti
(
i2c_d©a
,
buf
[
wrcou¡
]);

238 
timeout
 = 
	`waô_f‹_pö
(&
°©us
);

239 i‡(
timeout
) {

240 
	`¥ötf
("\tTimeout happened - Write didÇot goÅhroughÅhe BFM -- Diagnose\n");

241 
	`i2c_°›
();

242  
EREMOTEIO
;

244 i‡(
°©us
 & 
I2C_SHAKTI_LRB
) {

245 
	`i2c_°›
();

246 
	`¥ötf
("\tSome status check failing\n");

247  
EREMOTEIO
;

250 i‡(
œ°
){

251 
	`¥ötf
("\tLast byte sent : Issueá stop\n");

252 
	`i2c_°›
();

255 
	`¥ötf
("\tSending Rep Startánd doing some other R/WÅransaction\n");

256 if(!
íi
)

257 
	`i2c_ªp°¨t
();

259 
	`i2c_ªp°¨t_íi
();

262  
wrcou¡
;

263 
	}
}

265 
	$shakti_ªadbyãs
(*
buf
, 
cou¡
, 
œ°
)

267 
i
, 
°©us
;

268 
wÂ
;

269 
ªad_vÆue
 = 0;

271 
i
 = 0; i <
cou¡
; i++) {

272 
wÂ
 = 
	`waô_f‹_pö
(&
°©us
);

273 i‡(
wÂ
) {

274 
	`i2c_°›
();

278 i‡((
°©us
 & 
I2C_SHAKTI_LRB
Ë&& (
i
 !
cou¡
)) {

279 
	`i2c_°›
();

280 
	`¥ötf
("\tNoáck\n");

284 i‡(
i
)

286 
buf
[
i
 - 1] = 
	`gë_i2c_shakti
(
i2c_d©a
);

287 
	`¥ötf
("\¿Ród VÆue: %x", 
buf
[
i
 - 1]);

290 
	`gë_i2c_shakti
(
i2c_d©a
);

292 i‡(
i
 =
cou¡
 - 1) {

293 
	`£t_i2c_shakti
(
i2c_c⁄åﬁ
, 
I2C_SHAKTI_ESO
);

294 } i‡(
i
 =
cou¡
) {

295 i‡(
œ°
)

296 
	`i2c_°›
();

298 
	`i2c_ªp°¨t
();

303  
i
-1;

304 
	}
}

	@i2c_dma.c

1 
	~"i2c.h
"

2 
	~"../DMA/dma.h
"

4 #ifde‡
IGNORE_PRINTF


5 
	#¥ötf
(
fmt
, ...Ë(0)

	)

8 
	#wrôebyãs
 34

	)

9 
	#ªadbyãs
 33

	)

11 
	$waô_f‹_dma_öãºu±_i2c
()

13 ((*
dma_i§
)&0xF00)!=0x700) {

17 
	`¥ötf
("\tWating for dma channel3 operationÅo finish\n");

19 
	`¥ötf
("\tDMA disabled");

20 *
dma_c¸3
= 0x0;

21 *
dma_if¸
=0xF00;

22 *
dma_if¸
=0x0;

24 
	}
}

26 
	$maö
()

29 
	`¥ötf
("\tI2C: Starting Transaction\n");

30 
¶avóddr
 = 160;

31 
ªadbuf
[33];

32 
wrôebuf1
[2] = {0,0};

33 
wrôebufco
[32] ;

34 
i
 =0,
°©us
;

35 
cou¡5
 = 0;

36 
ãmp
;

38 
wrôebuf
[
wrôebyãs
] ;

39 
wrôebuf
[0] = 0x0;

40 
wrôebuf
[1] = 0x0;

42 if(
	`shakti_öô_i2c
())

44 
	`¥ötf
("\tSomething Wrong In Initialization\n");

48 
	`¥ötf
("\tIntilization Happened Fine\n");

50 
k
 =0 ;

53 
j
=0; j< 1; j++)

56 
i
 = 2; i < 
wrôebyãs
; i++) {

57 
wrôebuf
[
i
] = 
	`ønd
() % 255 ;

58 
wrôebufco
[
cou¡5
] = 
wrôebuf
[
i
];

59 
cou¡5
++;

62 
wrôebuf
[0] = 
k
 >> 8;

63 
wrôebuf
[1] = 
k
 & 255 ;

64 
k
 = k + 32;

66 
	`¥ötf
("\tConfiguring DMA channel 3Åo writeÅhe Data from MemoryÅo I2C");

72 
	`¥ötf
("\tSetting Slave Address\n");

73 
	`£t_i2c_shakti
(
i2c_d©a
,
¶avóddr
);

74 
	`¥ötf
("\tSlave Address set\n");

75 
ãmp
 = 
	`gë_i2c_shakti
(
i2c_d©a
);

76 
	`¥ötf
("\tSë sœvêaddªs†ªadágaö, which i†0x%x\n",
ãmp
);

77 if(
¶avóddr
 !()
ãmp
)

78 
	`¥ötf
("\tSomewhere something is wrong withÅhe controller - it is giving out someÑandomáddress -- Diagnose\n");

81 
	`waô_f‹_bb
())

83 
	`¥ötf
("Error While waiting for bb");

87 
	`i2c_°¨t_íi
();

92 
	`£t_dma_shakti
(
dma_˙då3
,0x22);

93 
	`£t_dma_shakti
(
dma_cm¨3
,(*)&
wrôebuf
);

94 
	`£t_dma_shakti
(
dma_˝¨3
,(*)
I2C_DATA
);

95 
	`£t_dma_shakti
(
dma_c¸3
,0x0000009F);

96 
	`¥ötf
("dma_cm¨3: %x\n",&
wrôebuf
);

101 
	`waô_f‹_dma_öãºu±_i2c
();

105 
	`¥ötf
("\tDMA interrupt came -- indicatingÅransfer complete -- Should check it byÑeading it");

106 
	`waô_f‹_pö
(&
°©us
))

108 
	`¥ötf
("\t Location : 1 :Error");

113 
	`i2c_°›
();

114 
	`¥ötf
("Started waiting for write cycle");

115 
	`waôf‹
(60000);

116 
	`¥ötf
("Ended waiting write cycle");

120 
	`¥ötf
("32B written :ÅimeÅoÑead");

122 
	`£t_i2c_shakti
(
i2c_d©a
,
¶avóddr
);

123 
	`i2c_°¨t_íi
();

125 
	`waô_f‹_pö
(&
°©us
))

127 
	`¥ötf
("\tLocation 2Érror");

130 if(
	`shakti_£ndbyãs
(
wrôebuf1
, 2, 0,1)!=2)

132 
	`¥ötf
("\tSomething wrong in sending bytesÅo write -- Diagnose\n");

136 
	`waô_f‹_pö
(&
°©us
))

138 
	`¥ötf
("\tLocation 3Érror");

142 
	`¥ötf
("\tSecond set of data writtenÅo I2C - shift modeánd stop\n");

144 
	`£t_i2c_shakti
(
i2c_d©a
,
¶avóddr
 + 1);

148 
	`waô_f‹_pö
(&
°©us
))

150 
	`¥ötf
("\twaiting forÖin-3\n");

153 
	`£t_dma_shakti
(
dma_˙då3
,0x1F);

154 
	`£t_dma_shakti
(
dma_cm¨3
,&
ªadbuf
);

155 
	`£t_dma_shakti
(
dma_˝¨3
,(*)
I2C_DATA
);

156 
	`£t_dma_shakti
(
dma_if¸
,0);

157 
	`£t_dma_shakti
(
dma_c¸3
,0x0000008F);

159 
	`waô_f‹_dma_öãºu±_i2c
();

161 
	`waô_f‹_pö
(&
°©us
))

163 
	`¥ötf
("\tLocation : 4Érror\n");  0;

167 
	`£t_i2c_shakti
(
i2c_c⁄åﬁ
, 
I2C_SHAKTI_ESO
);

169 
ªadbuf
[31] = 
	`gë_i2c_shakti
(
i2c_d©a
);

171 
	`waô_f‹_pö
(&
°©us
))

173 
	`¥ötf
("\twaiting forÖin-3\n");

175 
ªadbuf
[32] = 
	`gë_i2c_shakti
(
i2c_d©a
);

176 
	`i2c_°›
();

180 
	`¥ötf
("PrintÑead & write bytes \n\n ");

181 
i
=0;i<32;i++)

182 
	`¥ötf
("\n\tNo. %d Wrôebu‡i†0x%x Ródbu‡i†0x%x\n",
i
,
wrôebufco
[i],
ªadbuf
[i+1]);

184 
	`¥ötf
("EndingÖrintÑead & write bytes \n\n ");

186 
i
=0;i<32;i++)

188 if(
ªadbuf
[
i
+1] !
wrôebufco
[i]){

189 
	`¥ötf
("\tByã†wrôã¿™dÑód d⁄'àm©chÉº‹áà%d\n",
i
);

193 
	`¥ötf
("Enjoy Its working");

197 
	}
}

	@i2c_eep_rw.c

1 
	~"i2c.h
"

2 
	~<°döt.h
>

3 
	~"wrôe_d©a.h
"

18 
	$C⁄figuªI2cC⁄åﬁÀr
(
¥esˇÀrClock
, 
s˛kFªquícy
)

20 
ãmp
 = 0;

21 
	`¥ötf
("\n\tI2C: InitializingÅhe Controller");

24 
	`£t_i2c_shakti
(
i2c_¥esˇÀ
, 
¥esˇÀrClock
);

27 
ãmp
 = 
	`gë_i2c_shakti
(
i2c_¥esˇÀ
);

28 if(
ãmp
 !
¥esˇÀrClock
)

30 
	`¥ötf
("\n\àEº‹ i¿£âögÖªsˇÀ∏˛ock; Wr. VÆue: 0x%02x; Ród VÆue: 0x%02x", 
¥esˇÀrClock
, 
ãmp
);

35 
	`£t_i2c_shakti
(
i2c_s˛
, 
s˛kFªquícy
);

40 
ãmp
 = 
	`gë_i2c_shakti
(
i2c_s˛
);

43 if(
ãmp
 !
s˛kFªquícy
){

44 
	`¥ötf
("\n\tClock inôüliz©i⁄ faûed WrôêVÆue: 0x%02x;Ñód VÆue: 0x%02x", 
s˛kFªquícy
, 
ãmp
);

45  -
ENXIO
;

48 
	`¥ötf
("\tClock successfully initalized\n");

77 
	`¥ötf
("\tSetting Control Register with 0x01 \n");

78 
	`£t_i2c_shakti
(
i2c_c⁄åﬁ
, 0x01);

80 
ãmp
 = 
	`gë_i2c_shakti
(
i2c_c⁄åﬁ
);

81 
	`¥ötf
("\tC⁄åﬁ Regi°î Ród VÆuê0x%x \n", 
ãmp
);

87 
	`¥ötf
("\tSetting Control Register with 0x80 \n");

88 
	`£t_i2c_shakti
(
i2c_c⁄åﬁ
, 
I2C_SHAKTI_PIN
);

90 
	`¥ötf
("\tControl Register Successfully set \n");

93 
	`¥ötf
("\tReading Control Register \n");

94 
ãmp
 = 
	`gë_i2c_shakti
(
i2c_c⁄åﬁ
);

95 
	`¥ötf
("\tC⁄åﬁ Regi°î i†Wrôã¿wôh 0x%x \n", 
ãmp
);

97 if((
ãmp
 & 0x7f) != 0){

98 
	`¥ötf
("\tDevice Not Recognized\n");

99  -
ENXIO
;

102 
	`¥ötf
("\tWaiting forá specifiedÅime\n ");

103 
	`waôf‹
(900);

104 
	`¥ötf
("\tDone Waiting \n ");

106 
	`i2c_°›
();

109 
	`¥ötf
("\n MakingÅhe I2C chip in idle State");

110 
	`£t_i2c_shakti
(
i2c_c⁄åﬁ
, 
I2C_SHAKTI_IDLE
);

112 
	`¥ötf
("\n\tWaiting forá specifiedÅime After setting idle\n ");

113 
	`waôf‹
(900);

114 
	`¥ötf
("\tDone Waiting \n ");

116 
ãmp
 = 
	`gë_i2c_shakti
(
i2c_°©us
);

117 
	`¥ötf
("\tSètu†Reg vÆuêi†: 0x%x \n",
ãmp
);

120 if(
ãmp
 !(
I2C_SHAKTI_PIN
 | 
I2C_SHAKTI_BB
)){

121 
	`¥ötf
("\tInitialization failed\n");

122  -
ENXIO
;

125 
	`¥ötf
("\tAll is wellÅill here \n");

127 
	`¥ötf
("\tI2C successfully initialized\n");

128 
	}
}

132 
	$C⁄figuªI2cC⁄åﬁÀr1
(
¥esˇÀrClock
, 
s˛kFªquícy
)

134 
ãmp
 = 0;

135 
	`¥ötf
("\n\tI2C: InitializingÅhe Controller");

138 
	`£t_i2c_shakti
(
i2c_Àd
, 
¥esˇÀrClock
);

141 
ãmp
 = 
	`gë_i2c_shakti
(
i2c_Àd
);

142 if(
ãmp
 !
¥esˇÀrClock
)

144 
	`¥ötf
("\n\àEº‹ i¿£âögÖªsˇÀ∏˛ock; Wr. VÆue: 0x%02x; Ród VÆue: 0x%02x", 
¥esˇÀrClock
, 
ãmp
);

148 
	`£t_i2c_shakti
(
i2c_Àd
, 
s˛kFªquícy
);

153 
ãmp
 = 
	`gë_i2c_shakti
(
i2c_Àd
);

156 if(
ãmp
 !
s˛kFªquícy
){

157 
	`¥ötf
("\n\tClock inôüliz©i⁄ faûed WrôêVÆue: 0x%02x;Ñód VÆue: 0x%02x", 
s˛kFªquícy
, 
ãmp
);

158  -
ENXIO
;

161 
	`¥ötf
("\tClock successfully initalized\n");

163 
	}
}

167 
	$WrôeSœveAddªss
(
¶aveAddªss
)

169 
timeout
;

170 
ãmp
 = 0;

171 
°©us
 = 0;

173 
	`¥ötf
("\n\tSëtög SœvêAddªs†: 0x%02x\n", 
¶aveAddªss
);

174 
	`£t_i2c_shakti
(
i2c_d©a
,
¶aveAddªss
);

175 
	`¥ötf
("\tSlave Address set\n");

177 
ãmp
 = 
	`gë_i2c_shakti
(
i2c_d©a
);

178 
	`¥ötf
("\tSë sœvêaddªs†ªadágaö, which i†0x%x\n",
ãmp
);

179 if(
¶aveAddªss
 !()
ãmp
)

180 
	`¥ötf
("\tSœvêaddªs†i†nŸ m©chög; Wrôã¿Add. VÆue: 0x%02x; Ród Add. VÆue: 0x%02x\n", 
¶aveAddªss
, 
ãmp
);

183 
	`i2c_°¨t
();

184 
timeout
 = 
	`waô_f‹_pö
(&
°©us
);

185 i‡(
timeout
) {

186 
	`¥ötf
("\tTimeout happened - Write didÇot goÅhroughÅhe BFM -- Diagnose\n");

187 
	`i2c_°›
();

188  
EREMOTEIO
;

191 i‡(
°©us
 & 
I2C_SHAKTI_LRB
) {

192 
	`i2c_°›
();

193 
	`¥ötf
("\tSome status check failing\n");

195 
	}
}

198 
	$SëEïromRódOrWrôeSèπAddªss
(
°¨tAddªss
)

200 
timeout
;

201 
ãmp
 = 0;

202 
°©us
 = 0;

203 
	`£t_i2c_shakti
(
i2c_d©a
, (
°¨tAddªss
 >> 8) & 0xFF);

204 
timeout
 = 
	`waô_f‹_pö
(&
°©us
);

205 i‡(
timeout
) {

206 
	`¥ötf
("\tTimeout happened - Write didÇot goÅhroughÅhe BFM -- Diagnose\n");

207 
	`i2c_°›
();

208  
EREMOTEIO
;

211 i‡(
°©us
 & 
I2C_SHAKTI_LRB
) {

212 
	`i2c_°›
();

213 
	`¥ötf
("\tSome status check failing\n");

214  
EREMOTEIO
;

217 
	`£t_i2c_shakti
(
i2c_d©a
, (
°¨tAddªss
 >> 0) & 0xFF);

219 
timeout
 = 
	`waô_f‹_pö
(&
°©us
);

220 i‡(
timeout
) {

221 
	`¥ötf
("\tTimeout happened - Write didÇot goÅhroughÅhe BFM -- Diagnose\n");

222 
	`i2c_°›
();

223  
EREMOTEIO
;

226 i‡(
°©us
 & 
I2C_SHAKTI_LRB
) {

227 
	`i2c_°›
();

228 
	`¥ötf
("\tSome status check failing\n");

230 
	}
}

232 
	$WaôF‹RódOrWrôeCom∂ëe
(*
°©us
)

234 
timeout
 = 
DEF_TIMEOUT
;

236 *
°©us
 = 
	`gë_i2c_shakti
(
i2c_°©us
);

238 (*
°©us
 & 
I2C_SHAKTI_PIN
Ë&& --
timeout
) {

239 
	`waôf‹
(10000);

240 *
°©us
 = 
	`gë_i2c_shakti
(
i2c_°©us
);

242 i‡(
timeout
 == 0){

243 
	`¥ötf
("\tWait forÖinÅimed out\n");

244  
ETIMEDOUT
;

250 
	}
}

253 
	$I2CEïromWrôeD©a
–c⁄° *
buf
, 
cou¡
, 
œ°
, 
íi
)

255 
wrcou¡
, 
°©us
, 
timeout
;

256 
i
 = 0;

257 
	`¥ötf
("\tStarting Write Transaction -- Did you createÅri1Çets for SDAánd SCL in verilog?\n");

258 
i
 = 0; i < 
cou¡
; ++i)

260 
	`¥ötf
("\n\àWrôögÅhêvÆuê0x%02x i¡ÿEEPROM", 
buf
[
i
]);

261 
	`£t_i2c_shakti
(
i2c_d©a
, 
buf
[
i
]);

262 if–
ETIMEDOUT
 =
	`WaôF‹RódOrWrôeCom∂ëe
(&
°©us
))

264 
	`¥ötf
("\n I2C Write Timed out");

265 
	`i2c_°›
();

266  
EREMOTEIO
;

268 i‡(
°©us
 & 
I2C_SHAKTI_LRB
)

270 
	`i2c_°›
();

271 
	`¥ötf
("\tSome status check failing\n");

272  
EREMOTEIO
;

276 i‡(
œ°
){

277 
	`¥ötf
("\n\tLast byte sent : Issueá stop\n");

278 
	`i2c_°›
();

282 
	`¥ötf
("\n\tSending Rep Startánd doing some other R/WÅransaction\n");

283 if(!
íi
)

284 
	`i2c_ªp°¨t
();

286 
	`i2c_ªp°¨t_íi
();

289  
i
;

290 
	}
}

292 
	$I2CEïromRódD©a
(*
buf
, 
cou¡
, 
œ°
)

294 
i
, 
°©us
;

295 
wÂ
;

296 
ªad_vÆue
 = 0;

299 
i
 = -1; i < 
cou¡
; i++)

301 if–
ETIMEDOUT
 =
	`WaôF‹RódOrWrôeCom∂ëe
(&
°©us
))

303 
	`¥ötf
("\n I2C Read Timed out");

304 
	`i2c_°›
();

305  
EREMOTEIO
;

307 i‡(
°©us
 & 
I2C_SHAKTI_LRB
)

309 
	`i2c_°›
();

310 
	`¥ötf
("\tSome status check failing\n");

311  
EREMOTEIO
;

315 i‡(-1 !
i
)

317 
buf
[
i
] = 
	`gë_i2c_shakti
(
i2c_d©a
);

318 
	`¥ötf
("\n\àRód Addªs†Off£t: %d; VÆue: %x", 
i
, 
buf
[i]);

324 
	`¥ötf
("\n\àDummy Ród VÆue: 0x%02x", 
	`gë_i2c_shakti
(
i2c_d©a
) );

327 i‡(
i
 =
cou¡
 - 1)

329 
	`£t_i2c_shakti
(
i2c_c⁄åﬁ
, 
I2C_SHAKTI_ESO
);

331 i‡(
i
 =
cou¡
)

333 i‡(
œ°
)

335 
	`¥ötf
("\n\t Read is complete; Sending Stop signal");

336 
	`i2c_°›
();

340 
	`¥ötf
("\n\t Sending I2C Repeat Start");

341 
	`i2c_ªp°¨t
();

346 
	`¥ötf
("\n\àRód %d Byã†‰om EEPROM", 
i
);

347  
i
;

348 
	}
}

353 
	$maö
(){

354 
timeout
;

356 
	`u¨t_öô
();

358 
	`¥ötf
("\tI2C: Starting Transaction\n");

360 
wrôebuf1
[2] = {0,0};

361 
wrôebuf
[18], 
wrôeD©a
 = 0x30;

362 
wrôebuf
[0] = 0;

363 
wrôebuf
[1] = 0;

365 
ªadbuf
[32];

366 
i
 = 0, 
j
 = 0, 
k
 = 0, 
°©us
=0;

367 
¶avóddr
 = 160;

368 
ãmp
 = 0;

370 
	`¥ötf
("\t Start of Write Sequence into EEPROM -- Objective: LoadÅhe EEPROM with 16KB of Data\n");

377 if–
	`C⁄figuªI2cC⁄åﬁÀr
(0x0F, 0x51))

379 
	`¥ötf
("\tSomething Wrong In Initialization\n");

383 
	`¥ötf
("\tIntilization Happened Fine\n");

388 
	`waô_f‹_bb
())

390 
	`¥ötf
("\tError in Waiting for BB\n");

393 
j
 = 0; j < 16; ++j)

395 
wrôebuf
[
k
++] = 
wrôeD©a
++;

397 
k
 = 0;

399 
	`WrôeSœveAddªss
(
I2C_SLAVE_ADDRESS
);

400 
	`SëEïromRódOrWrôeSèπAddªss
(0x0000);

401 if–16 !
	`I2CEïromWrôeD©a
(
wrôebuf
, 16,1,0) )

403 
	`¥ötf
("\n Error occured when writing into EEPROM");

407 
	`waôf‹
(9000);

409 
	`waô_f‹_bb
())

411 
	`¥ötf
("\twaiting for bb-2\n");

414 
	`¥ötf
("\tSlave Addr 2 set - This isÅo incrementÅhe memory counter inÅhe EEPROM\n");

416 
	`WrôeSœveAddªss
(
I2C_SLAVE_ADDRESS
);

419 
	`waô_f‹_pö
(&
°©us
))

421 
	`¥ötf
("\twaiting forÖin\n");

424 
	`SëEïromRódOrWrôeSèπAddªss
(0x0000);

426 
	`WrôeSœveAddªss
(
I2C_SLAVE_ADDRESS
 + 1);

428 if(
	`I2CEïromRódD©a
–
ªadbuf
, 16, 1) != 16)

430 
	`¥ötf
("\n\tSomething wrong inÑeading bytes\n -- Diagnose");

433 
	`¥ötf
("\n I2C ACCESS CHECK is done.");

435 
	`¥ötf
("\n I2C ACCESS CHECK - 11600");

437 if(
	`C⁄figuªI2cC⁄åﬁÀr1
(0x0F, 0x51))

439 
	`¥ötf
("\tSomething Wrong In Initialization\n");

443 
	`¥ötf
("\tIntilization Happened Fine\n");

446 
	}
}

	@i2c_eep_rw1.c

1 
	~"i2c.h
"

2 
	~<°döt.h
>

3 
	~"wrôe_d©a.h
"

5 
uöçå_t
 
	$h™dÀ_å≠
(
uöçå_t
 
ˇu£
, uöçå_à
ïc
, uöçå_à
ªgs
[32])

7 
	`¥ötf
("\àTø∞Takí: cau£: %08xÉpc: %08x \n",
ˇu£
,
ïc
);

8 
	}
}

10 
	$maö
(){

11 
timeout
;

13 
	`u¨t_öô
();

15 
	`¥ötf
("\tI2C: Starting Transaction\n");

17 
wrôebuf1
[2] = {0,0};

18 
wrôebuf
[18], 
wrôeD©a
 = 0x20;

19 
wrôebuf
[0] = 0;

20 
wrôebuf
[1] = 0;

22 
ªadbuf
[32];

23 
i
 = 0, 
j
 = 0, 
k
 = 0, 
°©us
=0;

24 
¶avóddr
 = 160;

25 
ãmp
 = 0;

26 * 
sour˚_addªss
 = (*Ë
ì¥om_d©a
;

27 
	`¥ötf
("\t Start of Write Sequence into EEPROM -- Objective: LoadÅhe EEPROM with 16KB of Data\n");

28 if(
	`shakti_öô_i2c
())

30 
	`¥ötf
("\tSomething Wrong In Initialization\n");

34 
	`¥ötf
("\tIntilization Happened Fine\n");

37 
	`waô_f‹_bb
())

39 
	`¥ötf
("\tError in Waiting for BB\n");

51 
j
 = 0; j < 16; ++j){

52 
	`¥ötf
("\àVÆuêbeög c›õd i†: %0x\n", 
wrôeD©a
);

53 
wrôebuf
[
k
++] = 
wrôeD©a
++;

56 
k
 = 0;

58 
	`¥ötf
("\tSëtög SœvêAddªs†: %d\n", 
i
);

59 
	`£t_i2c_shakti
(
i2c_d©a
,
¶avóddr
);

60 
	`¥ötf
("\tSlave Address set\n");

61 
ãmp
 = 
	`gë_i2c_shakti
(
i2c_d©a
);

62 
	`¥ötf
("\tSë sœvêaddªs†ªadágaö, which i†0x%x\n",
ãmp
);

63 if(
¶avóddr
 !()
ãmp
)

64 
	`¥ötf
("\tSomewhere something is wrong withÅhe controller - it is giving out someÑandomáddress -- Diagnose\n");

68 
	`i2c_°¨t
();

70 
timeout
 = 
	`waô_f‹_pö
(&
°©us
);

71 i‡(
timeout
) {

72 
	`¥ötf
("\tTimeout happened - Write didÇot goÅhroughÅhe BFM -- Diagnose\n");

73 
	`i2c_°›
();

74  
EREMOTEIO
;

77 i‡(
°©us
 & 
I2C_SHAKTI_LRB
) {

78 
	`i2c_°›
();

79 
	`¥ötf
("\tSome status check failing\n");

89 
	`£t_i2c_shakti
(
i2c_d©a
, 0x00);

90 
timeout
 = 
	`waô_f‹_pö
(&
°©us
);

91 i‡(
timeout
) {

92 
	`¥ötf
("\tTimeout happened - Write didÇot goÅhroughÅhe BFM -- Diagnose\n");

93 
	`i2c_°›
();

94  
EREMOTEIO
;

97 i‡(
°©us
 & 
I2C_SHAKTI_LRB
) {

98 
	`i2c_°›
();

99 
	`¥ötf
("\tSome status check failing\n");

100  
EREMOTEIO
;

103 
	`£t_i2c_shakti
(
i2c_d©a
, 0x00);

105 
timeout
 = 
	`waô_f‹_pö
(&
°©us
);

106 i‡(
timeout
) {

107 
	`¥ötf
("\tTimeout happened - Write didÇot goÅhroughÅhe BFM -- Diagnose\n");

108 
	`i2c_°›
();

109  
EREMOTEIO
;

112 i‡(
°©us
 & 
I2C_SHAKTI_LRB
) {

113 
	`i2c_°›
();

114 
	`¥ötf
("\tSome status check failing\n");

117 if(
	`shakti_£ndbyãs
(
wrôebuf
, 16,1,0) != 16){

118 
	`¥ötf
("\tSomething wrong in sending bytesÅo write -- Diagnose\n");

121 
	`waôf‹
(9000);

122 
wrôebuf
[0]++;

124 
	`waô_f‹_bb
())

126 
	`¥ötf
("\twaiting for bb-2\n");

130 
	`£t_i2c_shakti
(
i2c_d©a
,
¶avóddr
);

131 
	`i2c_°¨t
();

139 
	`¥ötf
("\tSlave Addr 2 set - This isÅo incrementÅhe memory counter inÅhe EEPROM\n");

140 
	`waô_f‹_pö
(&
°©us
))

142 
	`¥ötf
("\twaiting forÖin\n");

144 if(
	`shakti_£ndbyãs
(
wrôebuf1
, 2, 0,0)!=2)

146 
	`¥ötf
("\tSomething wrong in sending bytesÅo write -- Diagnose\n");

149 
	`waô_f‹_pö
(&
°©us
))

151 
	`¥ötf
("\twaiting forÖin-2\n");

153 
	`£t_i2c_shakti
(
i2c_d©a
,
¶avóddr
 + 1);

155 
	`waô_f‹_pö
(&
°©us
))

157 
	`¥ötf
("\twaiting forÖin-3\n");

160 if(
	`shakti_ªadbyãs
–
ªadbuf
, 16, 1)!= 16)

162 
	`¥ötf
("\tSomething wrong inÑeading bytes\n -- Diagnose");

170 
	}
}

	@i2c_eep_rw2.c

1 
	~"i2c.h
"

2 
	~<°döt.h
>

3 
	~"wrôe_d©a.h
"

5 
uöçå_t
 
	$h™dÀ_å≠
(
uöçå_t
 
ˇu£
, uöçå_à
ïc
, uöçå_à
ªgs
[32])

7 
	`¥ötf
("\àTø∞Takí: cau£: %08xÉpc: %08x \n",
ˇu£
,
ïc
);

8 
	}
}

9 
	$WrôeSœveAddªss
(
¶aveAddªss
)

11 
timeout
;

12 
ãmp
 = 0;

13 
°©us
 = 0;

15 
	`¥ötf
("\tSëtög SœvêAddªs†: 0x%02x\n", 
¶aveAddªss
);

16 
	`£t_i2c_shakti
(
i2c_d©a
,
¶aveAddªss
);

17 
	`¥ötf
("\tSlave Address set\n");

19 
ãmp
 = 
	`gë_i2c_shakti
(
i2c_d©a
);

20 
	`¥ötf
("\tSë sœvêaddªs†ªadágaö, which i†0x%x\n",
ãmp
);

21 if(
¶aveAddªss
 !()
ãmp
)

22 
	`¥ötf
("\tSœvêaddªs†i†nŸ m©chög; Wrôã¿Add. VÆue: 0x%02x; Ród Add. VÆue: 0x%02x\n", 
¶aveAddªss
, 
ãmp
);

25 
	`i2c_°¨t
();

26 
timeout
 = 
	`waô_f‹_pö
(&
°©us
);

27 i‡(
timeout
) {

28 
	`¥ötf
("\tTimeout happened - Write didÇot goÅhroughÅhe BFM -- Diagnose\n");

29 
	`i2c_°›
();

30  
EREMOTEIO
;

33 i‡(
°©us
 & 
I2C_SHAKTI_LRB
) {

34 
	`i2c_°›
();

35 
	`¥ötf
("\tSome status check failing\n");

37 
	}
}

40 
	$SëEïromRódOrWrôeSèπAddªss
(
°¨tAddªss
)

42 
timeout
;

43 
ãmp
 = 0;

44 
°©us
 = 0;

45 
	`£t_i2c_shakti
(
i2c_d©a
, (
°¨tAddªss
 >> 8) & 0xFF);

46 
timeout
 = 
	`waô_f‹_pö
(&
°©us
);

47 i‡(
timeout
) {

48 
	`¥ötf
("\tTimeout happened - Write didÇot goÅhroughÅhe BFM -- Diagnose\n");

49 
	`i2c_°›
();

50  
EREMOTEIO
;

53 i‡(
°©us
 & 
I2C_SHAKTI_LRB
) {

54 
	`i2c_°›
();

55 
	`¥ötf
("\tSome status check failing\n");

56  
EREMOTEIO
;

59 
	`£t_i2c_shakti
(
i2c_d©a
, (
°¨tAddªss
 >> 0) & 0xFF);

61 
timeout
 = 
	`waô_f‹_pö
(&
°©us
);

62 i‡(
timeout
) {

63 
	`¥ötf
("\tTimeout happened - Write didÇot goÅhroughÅhe BFM -- Diagnose\n");

64 
	`i2c_°›
();

65  
EREMOTEIO
;

68 i‡(
°©us
 & 
I2C_SHAKTI_LRB
) {

69 
	`i2c_°›
();

70 
	`¥ötf
("\tSome status check failing\n");

72 
	}
}

74 
	$WaôF‹RódOrWrôeCom∂ëe
(*
°©us
)

76 
timeout
 = 
DEF_TIMEOUT
;

78 *
°©us
 = 
	`gë_i2c_shakti
(
i2c_°©us
);

80 (*
°©us
 & 
I2C_SHAKTI_PIN
Ë&& --
timeout
) {

81 
	`waôf‹
(10000);

82 *
°©us
 = 
	`gë_i2c_shakti
(
i2c_°©us
);

84 i‡(
timeout
 == 0){

85 
	`¥ötf
("\tWait forÖinÅimed out\n");

86  
ETIMEDOUT
;

92 
	}
}

95 
	$I2CEïromWrôeD©a
–c⁄° *
buf
, 
cou¡
, 
œ°
, 
íi
)

97 
wrcou¡
, 
°©us
, 
timeout
;

98 
i
 = 0;

99 
	`¥ötf
("\tStarting Write Transaction -- Did you createÅri1Çets for SDAánd SCL in verilog?\n");

100 
i
 = 0; i < 
cou¡
; ++i)

102 
	`¥ötf
("\n\àWrôögÅhêvÆuê0x%02x i¡ÿEEPROM", 
buf
[
i
]);

103 
	`£t_i2c_shakti
(
i2c_d©a
, 
buf
[
i
]);

104 if–
ETIMEDOUT
 =
	`WaôF‹RódOrWrôeCom∂ëe
(&
°©us
))

106 
	`¥ötf
("\n I2C Write Timed out");

107 
	`i2c_°›
();

108  
EREMOTEIO
;

110 i‡(
°©us
 & 
I2C_SHAKTI_LRB
)

112 
	`i2c_°›
();

113 
	`¥ötf
("\tSome status check failing\n");

114  
EREMOTEIO
;

118 i‡(
œ°
){

119 
	`¥ötf
("\n\tLast byte sent : Issueá stop\n");

120 
	`i2c_°›
();

124 
	`¥ötf
("\n\tSending Rep Startánd doing some other R/WÅransaction\n");

125 if(!
íi
)

126 
	`i2c_ªp°¨t
();

128 
	`i2c_ªp°¨t_íi
();

131  
i
;

132 
	}
}

134 
	$I2CEïromRódD©a
(*
buf
, 
cou¡
, 
œ°
)

136 
i
, 
°©us
;

137 
wÂ
;

138 
ªad_vÆue
 = 0;

141 
i
 = -1; i < 
cou¡
; i++)

143 if–
ETIMEDOUT
 =
	`WaôF‹RódOrWrôeCom∂ëe
(&
°©us
))

145 
	`¥ötf
("\n I2C Read Timed out");

146 
	`i2c_°›
();

147  
EREMOTEIO
;

149 i‡(
°©us
 & 
I2C_SHAKTI_LRB
)

151 
	`i2c_°›
();

152 
	`¥ötf
("\tSome status check failing\n");

153  
EREMOTEIO
;

157 i‡(-1 !
i
)

159 
buf
[
i
] = 
	`gë_i2c_shakti
(
i2c_d©a
);

160 
	`¥ötf
("\n\àRód Addªs†Off£t: %d; VÆue: %x", 
i
, 
buf
[i]);

166 
	`¥ötf
("\n\àDummy Ród VÆue: 0x%02x", 
	`gë_i2c_shakti
(
i2c_d©a
) );

169 i‡(
i
 =
cou¡
 - 1)

171 
	`£t_i2c_shakti
(
i2c_c⁄åﬁ
, 
I2C_SHAKTI_ESO
);

173 i‡(
i
 =
cou¡
)

175 i‡(
œ°
)

177 
	`¥ötf
("\n\t Read is complete; Sending Stop signal");

178 
	`i2c_°›
();

182 
	`¥ötf
("\n\t Sending I2C Repeat Start");

183 
	`i2c_ªp°¨t
();

188 
	`¥ötf
("\n\àRód %d Byã†‰om EEPROM", 
i
);

189  
i
;

190 
	}
}

195 
	$maö
(){

196 
timeout
;

198 
	`u¨t_öô
();

200 
	`¥ötf
("\tI2C: Starting Transaction\n");

202 
wrôebuf1
[2] = {0,0};

203 
wrôebuf
[18], 
wrôeD©a
 = 0x30;

204 
wrôebuf
[0] = 0;

205 
wrôebuf
[1] = 0;

207 
ªadbuf
[32];

208 
i
 = 0, 
j
 = 0, 
k
 = 0, 
°©us
=0;

209 
¶avóddr
 = 160;

210 
ãmp
 = 0;

211 * 
sour˚_addªss
 = (*Ë
ì¥om_d©a
;

212 
	`¥ötf
("\t Start of Write Sequence into EEPROM -- Objective: LoadÅhe EEPROM with 16KB of Data\n");

213 if(
	`shakti_öô_i2c
())

215 
	`¥ötf
("\tSomething Wrong In Initialization\n");

219 
	`¥ötf
("\tIntilization Happened Fine\n");

222 
	`waô_f‹_bb
())

224 
	`¥ötf
("\tError in Waiting for BB\n");

227 
j
 = 0; j < 16; ++j){

229 
wrôebuf
[
k
++] = 
wrôeD©a
++;

231 
k
 = 0;

233 
	`WrôeSœveAddªss
(
I2C_SLAVE_ADDRESS
);

234 
	`SëEïromRódOrWrôeSèπAddªss
(0x0000);

235 if–16 !
	`I2CEïromWrôeD©a
(
wrôebuf
, 16,1,0) )

237 
	`¥ötf
("\n Error occured when writing into EEPROM");

246 
	`waôf‹
(9000);

249 
	`waô_f‹_bb
())

251 
	`¥ötf
("\twaiting for bb-2\n");

264 
	`¥ötf
("\tSlave Addr 2 set - This isÅo incrementÅhe memory counter inÅhe EEPROM\n");

266 
	`WrôeSœveAddªss
(
I2C_SLAVE_ADDRESS
);

269 
	`waô_f‹_pö
(&
°©us
))

271 
	`¥ötf
("\twaiting forÖin\n");

282 
	`waô_f‹_pö
(&
°©us
))

284 
	`¥ötf
("\twaiting forÖin-2\n");

286 
	`SëEïromRódOrWrôeSèπAddªss
(0x0000);

288 
	`WrôeSœveAddªss
(
I2C_SLAVE_ADDRESS
 + 1);

292 if(
	`I2CEïromRódD©a
–
ªadbuf
, 16, 1) != 16)

294 
	`¥ötf
("\n\tSomething wrong inÑeading bytes\n -- Diagnose");

302 
	}
}

	@i2c_eeprom_rw.c

1 
	~"i2c.h
"

2 
	~<°döt.h
>

3 
	~"wrôe_d©a.h
"

5 
uöçå_t
 
	$h™dÀ_å≠
(
uöçå_t
 
ˇu£
, uöçå_à
ïc
, uöçå_à
ªgs
[32])

7 
	`¥ötf
("\àTø∞Takí: cau£: %08xÉpc: %08x \n",
ˇu£
,
ïc
);

8 
	}
}

10 
	$maö
(){

11 
	`u¨t_öô
();

13 
	`¥ötf
("\tI2C: Starting Transaction\n");

15 
wrôebuf1
[2] = {0,0};

16 
wrôebuf
[258];

17 
wrôeD©a
 = 0x20;

18 
wrôebuf
[0] = 0;

19 
wrôebuf
[1] = 0;

20 
ªadbuf
[32];

21 
i
 = 0, 
j
 = 0, 
k
 = 2, 
°©us
=0;

22 
¶avóddr
 = 0xA0;

23 
ãmp
 = 0;

25 
	`¥ötf
("\t Start of Write Sequence into EEPROM -- Objective: LoadÅhe EEPROM with 16KB of Data\n");

26 if(
	`shakti_öô_i2c
())

28 
	`¥ötf
("\tSomething Wrong In Initialization\n");

32 
	`¥ötf
("\tIntilization Happened Fine\n");

35 
	`waô_f‹_bb
())

37 
	`¥ötf
("\tError in Waiting for BB\n");

47 
wrôeD©a
 = 0x20;

48 
i
 = 0; i < 2; ++i){

49 if(
i
 = 0)

50 
wrôeD©a
 = 0x20;

52 
wrôeD©a
 = 0x40;

53 
j
 = 0; j < 16; ++j){

54 
	`¥ötf
("\àVÆuêbeög c›õd i†: %0x\n", 
wrôeD©a
);

55 
wrôebuf
[
k
++] = 
wrôeD©a
++;

58 
k
 = 2;

60 
	`¥ötf
("\tSëtög SœvêAddªs†: %d\n", 
i
);

61 
	`£t_i2c_shakti
(
i2c_d©a
,
¶avóddr
);

62 
	`¥ötf
("\tSlave Address set\n");

63 
ãmp
 = 
	`gë_i2c_shakti
(
i2c_d©a
);

64 
	`¥ötf
("\tSë sœvêaddªs†ªadágaö, which i†0x%x\n",
ãmp
);

65 if(
¶avóddr
 !()
ãmp
)

66 
	`¥ötf
("\tSomewhere something is wrong withÅhe controller - it is giving out someÑandomáddress -- Diagnose\n");

70 
	`i2c_°¨t
();

71 if(
	`shakti_£ndbyãs
(
wrôebuf1
, 2, 0,0) != 2)

73 
	`¥ötf
("\tSomething wrong in sending bytesÅo write -- Diagnose\n");

76 if(
	`shakti_£ndbyãs
(
wrôebuf
, 16, 1, 0) != 16){

77 
	`¥ötf
("\tSomething wrong in sending bytesÅo write -- Diagnose\n");

80 
	`waôf‹
(9000);

81 
wrôebuf
[0]++;

83 
	`waô_f‹_bb
())

85 
	`¥ötf
("\twaiting for bb-2\n");

89 
	`£t_i2c_shakti
(
i2c_d©a
,
¶avóddr
);

90 
	`i2c_°¨t
();

91 
	`¥ötf
("\tSlave Addr 2 set - This isÅo incrementÅhe memory counter inÅhe EEPROM\n");

92 
	`waô_f‹_pö
(&
°©us
))

94 
	`¥ötf
("\twaiting forÖin\n");

96 if(
	`shakti_£ndbyãs
(
wrôebuf1
, 2, 0,0)!=2)

98 
	`¥ötf
("\tSomething wrong in sending bytesÅo write -- Diagnose\n");

101 
	`waô_f‹_pö
(&
°©us
))

103 
	`¥ötf
("\twaiting forÖin-2\n");

105 
	`£t_i2c_shakti
(
i2c_d©a
,
¶avóddr
 + 1);

107 
	`waô_f‹_pö
(&
°©us
))

109 
	`¥ötf
("\twaiting forÖin-3\n");

112 if(
	`shakti_ªadbyãs
–
ªadbuf
, 32, 1)!= 32)

114 
	`¥ötf
("\tSomething wrong inÑeading bytes\n -- Diagnose");

122 
	}
}

	@i2c_eeprom_write.c

1 
	~"i2c.h
"

2 
	~<°döt.h
>

3 
	~"wrôe_d©a.h
"

5 
uöçå_t
 
	$h™dÀ_å≠
(
uöçå_t
 
ˇu£
, uöçå_à
ïc
, uöçå_à
ªgs
[32])

7 
	`¥ötf
("\àTø∞Takí: cau£: %08xÉpc: %08x \n",
ˇu£
,
ïc
);

8 
	}
}

10 
	$maö
(){

11 
	`u¨t_öô
();

13 
	`¥ötf
("\tI2C: Starting Transaction\n");

15 
wrôebuf1
[2] = {0,0};

16 
wrôebuf
[258];

17 
wrôebuf
[0] = 0;

18 
wrôebuf
[1] = 0;

19 
ªadbuf
[32];

20 
i
 = 0, 
j
 = 0, 
k
 = 2, 
°©us
=0;

21 
¶avóddr
 = 160;

22 
ãmp
 = 0;

23 * 
sour˚_addªss
 = (*Ë
ì¥om_d©a
;

24 
	`¥ötf
("\t Start of Write Sequence into EEPROM -- Objective: LoadÅhe EEPROM with 16KB of Data\n");

25 if(
	`shakti_öô_i2c
())

27 
	`¥ötf
("\tSomething Wrong In Initialization\n");

31 
	`¥ötf
("\tIntilization Happened Fine\n");

34 
	`waô_f‹_bb
())

36 
	`¥ötf
("\tError in Waiting for BB\n");

47 
i
 = 0; i < 64; ++i){

48 
j
 = 0; j < 256; ++j){

49 
	`¥ötf
("\àVÆuêbeög c›õd i†: %0x\n",*(
sour˚_addªss
));

50 
wrôebuf
[
k
++] = *(
sour˚_addªss
++);

53 
k
 = 2;

55 
	`¥ötf
("\tSëtög SœvêAddªs†: %d\n", 
i
);

56 
	`£t_i2c_shakti
(
i2c_d©a
,
¶avóddr
);

57 
	`¥ötf
("\tSlave Address set\n");

58 
ãmp
 = 
	`gë_i2c_shakti
(
i2c_d©a
);

59 
	`¥ötf
("\tSë sœvêaddªs†ªadágaö, which i†0x%x\n",
ãmp
);

60 if(
¶avóddr
 !()
ãmp
)

61 
	`¥ötf
("\tSomewhere something is wrong withÅhe controller - it is giving out someÑandomáddress -- Diagnose\n");

65 
	`i2c_°¨t
();

66 if(
	`shakti_£ndbyãs
(
wrôebuf
, 258,1,0)!=258){

67 
	`¥ötf
("\tSomething wrong in sending bytesÅo write -- Diagnose\n");

70 
	`waôf‹
(9000);

71 
wrôebuf
[0]++;

73 
	`waô_f‹_bb
())

75 
	`¥ötf
("\twaiting for bb-2\n");

79 
	`£t_i2c_shakti
(
i2c_d©a
,
¶avóddr
);

80 
	`i2c_°¨t
();

81 
	`¥ötf
("\tSlave Addr 2 set - This isÅo incrementÅhe memory counter inÅhe EEPROM\n");

82 
	`waô_f‹_pö
(&
°©us
))

84 
	`¥ötf
("\twaiting forÖin\n");

86 if(
	`shakti_£ndbyãs
(
wrôebuf1
, 2, 0,0)!=2)

88 
	`¥ötf
("\tSomething wrong in sending bytesÅo write -- Diagnose\n");

91 
	`waô_f‹_pö
(&
°©us
))

93 
	`¥ötf
("\twaiting forÖin-2\n");

95 
	`£t_i2c_shakti
(
i2c_d©a
,
¶avóddr
 + 1);

97 
	`waô_f‹_pö
(&
°©us
))

99 
	`¥ötf
("\twaiting forÖin-3\n");

102 if(
	`shakti_ªadbyãs
–
ªadbuf
, 16384, 1)!= 16384)

104 
	`¥ötf
("\tSomething wrong inÑeading bytes\n -- Diagnose");

112 
	}
}

	@i2c_eeprom_write_1byte.c

1 
	~"i2c.h
"

2 
	~<°döt.h
>

3 
	~"wrôe_d©a.h
"

5 
uöçå_t
 
	$h™dÀ_å≠
(
uöçå_t
 
ˇu£
, uöçå_à
ïc
, uöçå_à
ªgs
[32])

7 
	`¥ötf
("\àTø∞Takí: cau£: %08xÉpc: %08x \n",
ˇu£
,
ïc
);

8 
	}
}

10 
	$maö
(){

11 
	`u¨t_öô
();

13 
	`¥ötf
("\tI2C: Starting Transaction\n");

15 
wrôebuf1
[2] = {0,0};

16 
wrôebuf
[258];

17 
wrôebuf
[0] = 0;

18 
wrôebuf
[1] = 0;

19 
ªadbuf
[32];

20 
i
 = 0, 
j
 = 0, 
k
 = 2, 
°©us
=0;

21 
¶avóddr
 = 160;

22 
ãmp
 = 0;

23 * 
sour˚_addªss
 = (*Ë
ì¥om_d©a
;

24 
	`¥ötf
("\t Start of Write Sequence into EEPROM -- Objective: LoadÅhe EEPROM with 16KB of Data\n");

25 if(
	`shakti_öô_i2c
())

27 
	`¥ötf
("\tSomething Wrong In Initialization\n");

31 
	`¥ötf
("\tIntilization Happened Fine\n");

34 
	`waô_f‹_bb
())

36 
	`¥ötf
("\tError in Waiting for BB\n");

46 *
sour˚_addªss
 = 0xb0;

48 
j
 = 0; j < 10; ++j){

49 
wrôebuf
[
k
++] = *(
sour˚_addªss
Ë+ 
j
;

50 
	`¥ötf
("\àVÆuêbeög c›õd i†: %0x\n",*(
sour˚_addªss
Ë+ 
j
);

53 
k
 = 2;

55 
	`¥ötf
("\tSëtög SœvêAddªs†: %d\n", 
i
);

56 
	`£t_i2c_shakti
(
i2c_d©a
,
¶avóddr
);

57 
	`¥ötf
("\tSlave Address set\n");

58 
ãmp
 = 
	`gë_i2c_shakti
(
i2c_d©a
);

59 
	`¥ötf
("\tSë sœvêaddªs†ªadágaö, which i†0x%x\n",
ãmp
);

60 if(
¶avóddr
 !()
ãmp
)

61 
	`¥ötf
("\tSomewhere something is wrong withÅhe controller - it is giving out someÑandomáddress -- Diagnose\n");

65 
	`i2c_°¨t
();

66 if(
	`shakti_£ndbyãs
(
wrôebuf
, 258,1,0)!=258){

67 
	`¥ötf
("\tSomething wrong in sending bytesÅo write -- Diagnose\n");

70 
	`waôf‹
(9000);

71 
wrôebuf
[0]++;

73 
	`waô_f‹_bb
())

75 
	`¥ötf
("\twaiting for bb-2\n");

79 
	`£t_i2c_shakti
(
i2c_d©a
,
¶avóddr
);

80 
	`i2c_°¨t
();

81 
	`¥ötf
("\tSlave Addr 2 set - This isÅo incrementÅhe memory counter inÅhe EEPROM\n");

82 
	`waô_f‹_pö
(&
°©us
))

84 
	`¥ötf
("\twaiting forÖin\n");

86 if(
	`shakti_£ndbyãs
(
wrôebuf1
, 2, 0,0)!=2)

88 
	`¥ötf
("\tSomething wrong in sending bytesÅo write -- Diagnose\n");

91 
	`waô_f‹_pö
(&
°©us
))

93 
	`¥ötf
("\twaiting forÖin-2\n");

95 
	`£t_i2c_shakti
(
i2c_d©a
,
¶avóddr
 + 1);

97 
	`waô_f‹_pö
(&
°©us
))

99 
	`¥ötf
("\twaiting forÖin-3\n");

103 if(
	`shakti_ªadbyãs
–
ªadbuf
, 10, 1)!= 10)

105 
	`¥ötf
("\tSomething wrong inÑeading bytes\n -- Diagnose");

113 
	}
}

	@write_data.h

2 
	gì¥om_d©a
[4096] = {0x00000093, 0x00000113, 0x00000193, 0x00000213, 0x00000293, 0x00000313, 0x00000393, 0x00000413, 0x00000493, 0x00000513, 0x00000593, 0x00000613, 0x00000693, 0x00000713, 0x00000793, 0x00000813, 0x00000893, 0x00000913, 0x00000993, 0x00000a13, 0x00000a93, 0x00000b13, 0x00000b93, 0x00000c13, 0x00000c93, 0x00000d13, 0x00000d93, 0x00000e13, 0x00000e93, 0x00000f13, 0x00000f93, 0x0001e2b7, 0x3002a073, 0x00100293, 0x01f29293, 0x0002da63, 0x00100513, 0x00001297, 0xf6a2a623, 0xff5ff06f, 0x00000297, 0x09028293, 0x30529073, 0x00301073, 0xf0000053, 0xf00000d3, 0xf0000153, 0xf00001d3, 0xf0000253, 0xf00002d3, 0xf0000353, 0xf00003d3, 0xf0000453, 0xf00004d3, 0xf0000553, 0xf00005d3, 0xf0000653, 0xf00006d3, 0xf0000753, 0xf00007d3, 0xf0000853, 0xf00008d3, 0xf0000953, 0xf00009d3, 0xf0000a53, 0xf0000ad3, 0xf0000b53, 0xf0000bd3, 0xf0000c53, 0xf0000cd3, 0xf0000d53, 0xf0000dd3, 0xf0000e53, 0xf0000ed3, 0xf0000f53, 0xf0000fd3, 0x00000297, 0x04028293, 0x30529073, 0x00003197, 0xfc418193, 0x86718213, 0xfc027213, 0xf1402573, 0x00100593, 0x00b57063, 0x01151613, 0x00c20233, 0x00150113, 0x01111113, 0x00410133, 0x7480106f, 0xef010113, 0x00113423, 0x00213823, 0x00313c23, 0x02413023, 0x02513423, 0x02613823, 0x02713c23, 0x04813023, 0x04913423, 0x04a13823, 0x04b13c23, 0x06c13023, 0x06d13423, 0x06e13823, 0x06f13c23, 0x09013023, 0x09113423, 0x09213823, 0x09313c23, 0x0b413023, 0x0b513423, 0x0b613823, 0x0b713c23, 0x0d813023, 0x0d913423, 0x0da13823, 0x0db13c23, 0x0fc13023, 0x0fd13423, 0x0fe13823, 0x0ff13c23, 0x34202573, 0x341025f3, 0x00010613, 0x4e8010ef, 0x34151073, 0x000022b7, 0x8002829b, 0x3002a073, 0x00813083, 0x01013103, 0x01813183, 0x02013203, 0x02813283, 0x03013303, 0x03813383, 0x04013403, 0x04813483, 0x05013503, 0x05813583, 0x06013603, 0x06813683, 0x07013703, 0x07813783, 0x08013803, 0x08813883, 0x09013903, 0x09813983, 0x0a013a03, 0x0a813a83, 0x0b013b03, 0x0b813b83, 0x0c013c03, 0x0c813c83, 0x0d013d03, 0x0d813d83, 0x0e013e03, 0x0e813e83, 0x0f013f03, 0x0f813f83, 0x11010113, 0x30200073, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xff010113, 0x00113423, 0x00813023, 0x01010413, 0x7bc000ef, 0x00001517, 0x6c450513, 0x090010ef, 0x00000793, 0x00078513, 0x00813083, 0x00013403, 0x01010113, 0x00008067, 0xfd010113, 0x02813423, 0x03010413, 0xfea43423, 0x00058793, 0xfcc43c23, 0xfef42223, 0x00000013, 0x02813403, 0x03010113, 0x00008067, 0xfd010113, 0x02813423, 0x03010413, 0xfea43423, 0x00058793, 0xfcc43c23, 0xfef42223, 0x00000013, 0x02813403, 0x03010113, 0x00008067, 0xfb010113, 0x04813423, 0x05010413, 0x00050793, 0xfcb43023, 0xfac43c23, 0xfcf42623, 0xfe042623, 0x0c00006f, 0xfec42783, 0x00279793, 0xfc043703, 0x00f707b3, 0x0007a783, 0xfef42423, 0xfec42783, 0x00178793, 0x00279793, 0xfc043703, 0x00f707b3, 0x0007a783, 0xfef42223, 0xfec42783, 0x00279793, 0xfb843703, 0x00f707b3, 0x0007a783, 0xfef42023, 0xfec42783, 0x00178793, 0x00279793, 0xfb843703, 0x00f707b3, 0x0007a783, 0xfcf42e23, 0xfe842703, 0xfe042783, 0x0007071b, 0x0007879b, 0x00f70a63, 0xfec42783, 0x0017879b, 0x0007879b, 0x0b40006f, 0xfe442703, 0xfdc42783, 0x0007071b, 0x0007879b, 0x00f70a63, 0xfec42783, 0x0027879b, 0x0007879b, 0x0900006f, 0xfec42783, 0x0027879b, 0xfef42623, 0xfcc42783, 0x01f7d71b, 0x00f707bb, 0x4017d79b, 0x0007879b, 0x0017979b, 0x0007871b, 0xfec42783, 0x0007879b, 0xf2e7c0e3, 0xfcc42783, 0x0017f793, 0x0007879b, 0x04078463, 0xfcc42783, 0x00279793, 0xffc78793, 0xfc043703, 0x00f707b3, 0x0007a783, 0x0007869b, 0xfcc42783, 0x00279793, 0xffc78793, 0xfb843703, 0x00f707b3, 0x0007a783, 0x00068713, 0x00f70663, 0xfcc42783, 0x0080006f, 0x00000793, 0x00078513, 0x04813403, 0x05010113, 0x00008067, 0xfa010113, 0x04813c23, 0x06010413, 0x00050793, 0xfab43823, 0xfac43423, 0xfaf42e23, 0xfe042623, 0x0d80006f, 0xfec42783, 0x00379793, 0xfb043703, 0x00f707b3, 0x0007b787, 0xfef43027, 0xfec42783, 0x00178793, 0x00379793, 0xfb043703, 0x00f707b3, 0x0007b787, 0xfcf43c27, 0xfec42783, 0x00379793, 0xfa843703, 0x00f707b3, 0x0007b787, 0xfcf43827, 0xfec42783, 0x00178793, 0x00379793, 0xfa843703, 0x00f707b3, 0x0007b787, 0xfcf43427, 0xfe043707, 0xfd043787, 0xa2f727d3, 0x00f037b3, 0x0ff7f793, 0xfcf42223, 0xfd843707, 0xfc843787, 0xa2f727d3, 0x00f037b3, 0x0ff7f793, 0xfcf42023, 0xfc442703, 0xfc042783, 0x00f777b3, 0x0007879b, 0x02079063, 0xfec42783, 0x0017879b, 0x0007879b, 0xfc442703, 0x00f707bb, 0x0007879b, 0x08c0006f, 0xfec42783, 0x0027879b, 0xfef42623, 0xfbc42783, 0x01f7d71b, 0x00f707bb, 0x4017d79b, 0x0007879b, 0x0017979b, 0x0007871b, 0xfec42783, 0x0007879b, 0xf0e7c4e3, 0xfbc42783, 0x0017f793, 0x0007879b, 0x04078263, 0xfbc42783, 0x00379793, 0xff878793, 0xfb043703, 0x00f707b3, 0x0007b707, 0xfbc42783, 0x00379793, 0xff878793, 0xfa843703, 0x00f707b3, 0x0007b787, 0xa2f727d3, 0x00079663, 0xfbc42783, 0x0080006f, 0x00000793, 0x00078513, 0x05813403, 0x06010113, 0x00008067, 0xfe010113, 0x00813c23, 0x02010413, 0x00050793, 0xfef42623, 0x00022783, 0x0017b793, 0x0ff7f793, 0x0007871b, 0x00e22023, 0x00001797, 0x52c78793, 0x00100713, 0x0f50000f, 0x04e7a6af, 0x0006879b, 0x0007871b, 0xfec42783, 0xfff7879b, 0x0007879b, 0x02f71263, 0x00001797, 0x50078793, 0x0007a023, 0x00022703, 0x00001797, 0x4f478793, 0x00e7a023, 0x0200006f, 0x00000013, 0x00001797, 0x4e078793, 0x0007a783, 0x0007871b, 0x00022783, 0xfef716e3, 0x00000013, 0x01813403, 0x02010113, 0x00008067, 0xfd010113, 0x02813423, 0x03010413, 0xfca43c23, 0xfd843783, 0x0017d713, 0xfd843783, 0x00f747b3, 0x0017f793, 0xfef43423, 0xfd843783, 0x0017d713, 0xfe843783, 0x03e79793, 0x00f767b3, 0x00078513, 0x02813403, 0x03010113, 0x00008067, 0xf5010113, 0x0a813423, 0x0b010413, 0xf6a43423, 0xf6b43023, 0xf4c43c23, 0xf4d43823, 0xff040793, 0xf8078793, 0x03f78793, 0x0067d793, 0x00679793, 0xf6843703, 0x00e7b023, 0xf6043703, 0x00e7b423, 0xf5843703, 0x00e7b823, 0xf5043703, 0x00e7bc23, 0x00078693, 0x00000717, 0xaf470713, 0x00d73023, 0x00000013, 0x00000717, 0xb2470713, 0x00073703, 0xfe070ae3, 0x0007b783, 0x00078513, 0x0a813403, 0x0b010113, 0x00008067, 0xfb010113, 0x04813423, 0x05010413, 0x00050793, 0xfaf42e23, 0xfc042e23, 0xfdc42783, 0x0007871b, 0x00100793, 0xfee7cae3, 0xb00027f3, 0xfcf43823, 0xfd043783, 0xfef43423, 0xfbc42783, 0x0007879b, 0x04079463, 0x00001717, 0x37c70713, 0xfdc42783, 0x00379793, 0x00f707b3, 0x0007b783, 0xfe843703, 0x40f707b3, 0xfef43423, 0x00001717, 0x36870713, 0xfdc42783, 0x00379793, 0x00f707b3, 0x00001717, 0x1a470713, 0x00e7b023, 0xfdc42783, 0x0017871b, 0xfce42e23, 0x00001717, 0x32c70713, 0x00379793, 0x00f707b3, 0xfe843703, 0x00e7b023, 0xfdc42783, 0x0007871b, 0x00100793, 0xfee7cae3, 0xb02027f3, 0xfcf43423, 0xfc843783, 0xfef43023, 0xfbc42783, 0x0007879b, 0x04079463, 0x00001717, 0x2e870713, 0xfdc42783, 0x00379793, 0x00f707b3, 0x0007b783, 0xfe043703, 0x40f707b3, 0xfef43023, 0x00001717, 0x2d470713, 0xfdc42783, 0x00379793, 0x00f707b3, 0x00001717, 0x11870713, 0x00e7b023, 0xfdc42783, 0x0017871b, 0xfce42e23, 0x00001717, 0x29870713, 0x00379793, 0x00f707b3, 0xfe043703, 0x00e7b023, 0x00000013, 0x04813403, 0x05010113, 0x00008067, 0xfe010113, 0x00813c23, 0x02010413, 0xfea43423, 0x00011337, 0x2003031b, 0x02830383, 0x0403f393, 0xfe038ce3, 0x00011337, 0x3003031b, 0x00830383, 0x0013f393, 0xfe038ce3, 0xfe843783, 0x00179793, 0x0017e713, 0x00000797, 0x92c78793, 0x00e7b023, 0x0000006f, 0xfd010113, 0x02113423, 0x02813023, 0x03010413, 0xfea43423, 0xfeb43023, 0xfcc43c23, 0x53900513, 0xf8dff0ef, 0xfe010113, 0x00113c23, 0x00813823, 0x02010413, 0x00050793, 0xfef42623, 0xfec42783, 0x00078513, 0xf69ff0ef, 0xff010113, 0x00113423, 0x00813023, 0x01010413, 0x08600513, 0xfc9ff0ef, 0xfd010113, 0x02113423, 0x02813023, 0x00913c23, 0x03010413, 0xfca43c23, 0xfd843483, 0xfd843503, 0x519000ef, 0x00050793, 0x00078693, 0x00048613, 0x00100593, 0x04000513, 0xd3dff0ef, 0x00000013, 0x02813083, 0x02013403, 0x01813483, 0x03010113, 0x00008067, 0xfe010113, 0x00113c23, 0x00813823, 0x02010413, 0x00050793, 0xfeb43023, 0xfef42623, 0x00001517, 0xfc450513, 0xf89ff0ef, 0xfff00793, 0x00078513, 0x01813083, 0x01013403, 0x02010113, 0x00008067, 0xff010113, 0x00813423, 0x01010413, 0x00011337, 0x2003031b, 0x02830383, 0x0013f393, 0xfe038ce3, 0x00030503, 0x0ff57793, 0x0007879b, 0x00078513, 0x00813403, 0x01010113, 0x00008067, 0xff010113, 0x00813423, 0x01010413, 0x00011337, 0x2003031b, 0x08300393, 0x00730c23, 0x00000393, 0x00030423, 0x08200393, 0x00730023, 0x00300393, 0x00730c23, 0x00600393, 0x00730823, 0x00030423, 0x00000793, 0x00078513, 0x00813403, 0x01010113, 0x00008067, 0xfe010113, 0x00813c23, 0x02010413, 0x00050793, 0xfef42623, 0xfec42783, 0x0ff7f793, 0x00078513, 0x00011337, 0x2003031b, 0x02830383, 0x0203f393, 0xfe038ce3, 0x00a30023, 0x00000793, 0x00078513, 0x01813403, 0x02010113, 0x00008067, 0xf4010113, 0x0a113c23, 0x0a813823, 0x0a913423, 0x0c010413, 0x00050793, 0x00058713, 0xf4f42623, 0x00070793, 0xf4f42423, 0xfe040793, 0xf7078793, 0x03f78793, 0x0067d793, 0x00679493, 0x00000593, 0x00000513, 0xf50ff0ef, 0x00050793, 0xfcf42c23, 0xfc943823, 0xfc042e23, 0x0700006f, 0x00001717, 0xff070713, 0xfdc42783, 0x00379793, 0x00f707b3, 0x0007b783, 0x04078463, 0x00001717, 0xfe470713, 0xfdc42783, 0x00379793, 0x00f707b3, 0x0007b683, 0x00001717, 0xfbc70713, 0xfdc42783, 0x00379793, 0x00f707b3, 0x0007b783, 0x00078613, 0x00068593, 0x00001517, 0xe2c50513, 0x788000ef, 0xfdc42783, 0x0017879b, 0xfcf42e23, 0xfdc42783, 0x0007871b, 0x00100793, 0xf8e7d4e3, 0xfd842783, 0x00078513, 0xd75ff0ef, 0xfc010113, 0x02113c23, 0x02813823, 0x04010413, 0xfca43423, 0xfe042623, 0x06c0006f, 0xfc843783, 0x0ff7f793, 0x00f7f793, 0x0ff7f713, 0xfc843783, 0x00f7f693, 0x00900793, 0x00d7e663, 0x03000793, 0x0080006f, 0x05700793, 0x00f00613, 0xfec42683, 0x40d606bb, 0x0006869b, 0x00e787bb, 0x0ff7f713, 0xff040793, 0x00d787b3, 0xfee78423, 0xfc843783, 0x0047d793, 0xfcf43423, 0xfec42783, 0x0017879b, 0xfef42623, 0xfec42783, 0x0007871b, 0x00f00793, 0xf8e7d6e3, 0xfe040423, 0xfd840793, 0x00078513, 0xd0dff0ef, 0x00000013, 0x03813083, 0x03013403, 0x04010113, 0x00008067, 0xeb010113, 0x14113423, 0x14813023, 0x15010413, 0xeca43c23, 0xecb43823, 0xecc43423, 0x00068613, 0x00070693, 0x00078713, 0x00060793, 0xecf42223, 0x00068793, 0xecf42023, 0x00070793, 0xeaf42e23, 0xfe042623, 0xec446783, 0xec843703, 0x02f776b3, 0xfec42783, 0x0017871b, 0xfee42623, 0x0006871b, 0x00279793, 0xff040693, 0x00f687b3, 0xeee7ac23, 0xec446783, 0xec843703, 0x00f76c63, 0xec446783, 0xec843703, 0x02f757b3, 0xecf43423, 0xfb9ff06f, 0x00000013, 0x0180006f, 0xebc42783, 0xed843703, 0xed043583, 0x00078513, 0x000700e7, 0xec042783, 0xfff7871b, 0xece42023, 0xfec42703, 0x0007071b, 0xfcf74ce3, 0x0600006f, 0xfec42783, 0x00279793, 0xff040713, 0x00f707b3, 0xef87a703, 0xfec42783, 0x00279793, 0xff040693, 0x00f687b3, 0xef87a783, 0x00078693, 0x00900793, 0x00d7f663, 0x05700793, 0x0080006f, 0x03000793, 0x00e787bb, 0x0007879b, 0x0007879b, 0xed843703, 0xed043583, 0x00078513, 0x000700e7, 0xfec42783, 0xfff7871b, 0xfee42623, 0xf8f04ce3, 0x00000013, 0x14813083, 0x14013403, 0x15010113, 0x00008067, 0xfe010113, 0x00813c23, 0x02010413, 0xfea43423, 0x00058793, 0xfef42223, 0xfe442783, 0x0007871b, 0x00100793, 0x02e7d063, 0xfe843783, 0x0007b783, 0x00878693, 0xfe843703, 0x00d73023, 0x0007b783, 0x04c0006f, 0xfe442783, 0x0007879b, 0x02078063, 0xfe843783, 0x0007b783, 0x00878693, 0xfe843703, 0x00d73023, 0x0007b783, 0x0240006f, 0xfe843783, 0x0007b783, 0x00878693, 0xfe843703, 0x00d73023, 0x0007a783, 0x02079793, 0x0207d793, 0x00078513, 0x01813403, 0x02010113, 0x00008067, 0xfe010113, 0x00813c23, 0x02010413, 0xfea43423, 0x00058793, 0xfef42223, 0xfe442783, 0x0007871b, 0x00100793, 0x02e7d063, 0xfe843783, 0x0007b783, 0x00878693, 0xfe843703, 0x00d73023, 0x0007b783, 0x0440006f, 0xfe442783, 0x0007879b, 0x02078063, 0xfe843783, 0x0007b783, 0x00878693, 0xfe843703, 0x00d73023, 0x0007b783, 0x01c0006f, 0xfe843783, 0x0007b783, 0x00878693, 0xfe843703, 0x00d73023, 0x0007a783, 0x00078513, 0x01813403, 0x02010113, 0x00008067, 0xf9010113, 0x06113423, 0x06813023, 0x04913c23, 0x05213823, 0x07010413, 0xfaa43423, 0xfab43023, 0xf8c43c23, 0xf8d43823, 0x0240006f, 0x3e048263, 0xf9843783, 0x00178793, 0xf8f43c23, 0xfa843783, 0xfa043583, 0x00048513, 0x000780e7, 0xf9843783, 0x0007c783, 0x0007849b, 0x00048713, 0x02500793, 0xfcf716e3, 0xf9843783, 0x00178793, 0xf8f43c23, 0xf9843783, 0xfaf43c23, 0x02000793, 0xfcf403a3, 0xfff00793, 0xfcf42623, 0xfff00793, 0xfcf42423, 0xfc042823, 0xfa042a23, 0xf9843783, 0x00178713, 0xf8e43c23, 0x0007c783, 0x0007849b, 0xfdd4869b, 0x0006871b, 0x05500793, 0x32e7ec63, 0x02069793, 0x0207d793, 0x00279713, 0x00001797, 0xa1878793, 0x00f707b3, 0x0007a783, 0x0007871b, 0x00001797, 0xa0478793, 0x00f707b3, 0x00078067, 0x02d00793, 0xfcf403a3, 0xfa5ff06f, 0x03000793, 0xfcf403a3, 0xf99ff06f, 0xfc042423, 0xfc842703, 0x00070793, 0x0027979b, 0x00e787bb, 0x0017979b, 0x0007879b, 0x00f487bb, 0x0007879b, 0xfd07879b, 0xfcf42423, 0xf9843783, 0x0007c783, 0x0007849b, 0x00048713, 0x02f00793, 0x04e7dc63, 0x00048713, 0x03900793, 0x04e7c663, 0xf9843783, 0x00178793, 0xf8f43c23, 0xfa9ff06f, 0xf9043783, 0x00878713, 0xf8e43823, 0x0007a783, 0xfcf42423, 0x0280006f, 0xfcc42783, 0x0007879b, 0xf007dae3, 0xfc042623, 0xf0dff06f, 0x00100793, 0xfaf42a23, 0xf01ff06f, 0x00000013, 0xfcc42783, 0x0007879b, 0xee07d8e3, 0xfc842783, 0xfcf42623, 0xfff00793, 0xfcf42423, 0xeddff06f, 0xfd042783, 0x0017879b, 0xfcf42823, 0xecdff06f, 0xf9043783, 0x00878713, 0xf8e43823, 0x0007a783, 0xfa843703, 0xfa043583, 0x00078513, 0x000700e7, 0x21c0006f, 0xf9043783, 0x00878713, 0xf8e43823, 0x0007b903, 0x00091663, 0x00001917, 0x8d090913, 0xfcc42783, 0x0007879b, 0x08f05a63, 0xfc744783, 0x0ff7f713, 0x02d00793, 0x08f70263, 0xfc842783, 0x00078593, 0x00090513, 0x5cc000ef, 0x00050793, 0xfcc42703, 0x0007879b, 0x40f707bb, 0x0007879b, 0xfcf42623, 0x0280006f, 0xfc744783, 0x0007879b, 0xfa843703, 0xfa043583, 0x00078513, 0x000700e7, 0xfcc42783, 0xfff7879b, 0xfcf42623, 0xfcc42783, 0x0007879b, 0xfcf04ae3, 0x0240006f, 0xfa843783, 0xfa043583, 0x00048513, 0x000780e7, 0x00190913, 0xfcc42783, 0xfff7879b, 0xfcf42623, 0x00094783, 0x0007849b, 0x04048463, 0xfc842783, 0x0007879b, 0xfc07c6e3, 0xfc842783, 0xfff7879b, 0xfcf42423, 0xfc842783, 0x0007879b, 0xfa07dae3, 0x0200006f, 0xfa843783, 0xfa043583, 0x02000513, 0x000780e7, 0xfcc42783, 0xfff7879b, 0xfcf42623, 0xfcc42783, 0x0007879b, 0xfcf04ee3, 0x1040006f, 0xfd042703, 0xf9040793, 0x00070593, 0x00078513, 0xc51ff0ef, 0x00050793, 0xfcf43c23, 0xfd843783, 0x0207d063, 0xfa843783, 0xfa043583, 0x02d00513, 0x000780e7, 0xfd843783, 0x40f007b3, 0xfcf43c23, 0x00a00793, 0xfcf42a23, 0x0640006f, 0x00a00793, 0xfcf42a23, 0x0400006f, 0x00800793, 0xfcf42a23, 0x0340006f, 0x00100793, 0xfcf42823, 0xfa843783, 0xfa043583, 0x03000513, 0x000780e7, 0xfa843783, 0xfa043583, 0x07800513, 0x000780e7, 0x01000793, 0xfcf42a23, 0xfd042703, 0xf9040793, 0x00070593, 0x00078513, 0xb21ff0ef, 0xfca43c23, 0xfd442683, 0xfc744783, 0x0007879b, 0xfcc42703, 0xfd843603, 0xfa043583, 0xfa843503, 0x9b5ff0ef, 0x0340006f, 0xfa843783, 0xfa043583, 0x00048513, 0x000780e7, 0x0200006f, 0xfa843783, 0xfa043583, 0x02500513, 0x000780e7, 0xfb843783, 0xf8f43c23, 0x00000013, 0xc41ff06f, 0x00000013, 0x06813083, 0x06013403, 0x05813483, 0x05013903, 0x07010113, 0x00008067, 0xf9010113, 0x02113423, 0x02813023, 0x03010413, 0xfca43c23, 0x00b43423, 0x00c43823, 0x00d43c23, 0x02e43023, 0x02f43423, 0x03043823, 0x03143c23, 0x04040793, 0xfc878793, 0xfef43423, 0xfe843783, 0x00078693, 0xfd843603, 0x00000593, 0xfffff517, 0x72850513, 0xb81ff0ef, 0x00000793, 0x00078513, 0x02813083, 0x02013403, 0x07010113, 0x00008067, 0xfc010113, 0x02813c23, 0x04010413, 0x00050793, 0xfcb43823, 0xfcf42e23, 0xfc743423, 0xfd043783, 0xfef43423, 0xfe843783, 0x0007b783, 0xfdc42703, 0x0ff77713, 0x00e78023, 0xfe843783, 0x0007b783, 0x00178713, 0xfe843783, 0x00e7b023, 0x00000013, 0x03813403, 0x04010113, 0x00008067, 0xf0010113, 0x0c113423, 0x0c813023, 0x0d010413, 0xf2a43c23, 0xf2b43823, 0x00c43023, 0x00d43423, 0x00e43823, 0x00f43c23, 0x03043023, 0x03143423, 0x03040793, 0xfcf43c23, 0xf4840793, 0xf4840713, 0x39700693, 0x00d7a023, 0x0183b6b7, 0x3036869b, 0x00d7a223, 0x0103b6b7, 0x3836869b, 0x00d7a423, 0x000306b7, 0x0676869b, 0x00d7a623, 0x00e7b823, 0x00000717, 0xf3470713, 0x00e7bc23, 0x0000100f, 0xf3843783, 0xfef43423, 0x03040793, 0xfd078793, 0xfef43023, 0xfe043703, 0xf4840793, 0x00078513, 0xf3840793, 0x00070693, 0xf3043603, 0x00078593, 0xa59ff0ef, 0xf3843783, 0x00078023, 0xf3843783, 0x00078713, 0xfe843783, 0x40f707b3, 0x0007879b, 0x00078513, 0x0c813083, 0x0c013403, 0x10010113, 0x00008067, 0xfb010113, 0x04813423, 0x05010413, 0xfca43423, 0xfcb43023, 0xfac43c23, 0xfc843703, 0xfc043783, 0x00f76733, 0xfb843783, 0x00f767b3, 0x0077f793, 0x04079863, 0xfc043783, 0xfef43423, 0xfc843783, 0xfef43023, 0x0240006f, 0xfe843703, 0x00870793, 0xfef43423, 0xfe043783, 0x00878693, 0xfed43023, 0x00073703, 0x00e7b023, 0xfc843703, 0xfb843783, 0x00f707b3, 0xfe043703, 0xfcf768e3, 0x04c0006f, 0xfc043783, 0xfcf43c23, 0xfc843783, 0xfcf43823, 0x0240006f, 0xfd843703, 0x00170793, 0xfcf43c23, 0xfd043783, 0x00178693, 0xfcd43823, 0x00074703, 0x00e78023, 0xfc843703, 0xfb843783, 0x00f707b3, 0xfd043703, 0xfcf768e3, 0xfc843783, 0x00078513, 0x04813403, 0x05010113, 0x00008067, 0xfb010113, 0x04813423, 0x05010413, 0xfca43423, 0x00058793, 0xfac43c23, 0xfcf42223, 0xfc843703, 0xfb843783, 0x00f767b3, 0x0077f793, 0x08079263, 0xfc442783, 0x0ff7f793, 0xfcf43c23, 0xfd843783, 0x00879793, 0xfd843703, 0x00f767b3, 0xfcf43c23, 0xfd843783, 0x01079793, 0xfd843703, 0x00f767b3, 0xfcf43c23, 0xfd843783, 0x02079793, 0xfd843703, 0x00f767b3, 0xfcf43c23, 0xfc843783, 0xfef43423, 0x0180006f, 0xfe843783, 0x00878713, 0xfee43423, 0xfd843703, 0x00e7b023, 0xfc843703, 0xfb843783, 0x00f707b3, 0xfe843703, 0xfcf76ee3, 0x03c0006f, 0xfc843783, 0xfef43023, 0x01c0006f, 0xfe043783, 0x00178713, 0xfee43023, 0xfc442703, 0x0ff77713, 0x00e78023, 0xfc843703, 0xfb843783, 0x00f707b3, 0xfe043703, 0xfcf76ce3, 0xfc843783, 0x00078513, 0x04813403, 0x05010113, 0x00008067, 0xfd010113, 0x02813423, 0x03010413, 0xfca43c23, 0xfd843783, 0xfef43423, 0x0100006f, 0xfe843783, 0x00178793, 0xfef43423, 0xfe843783, 0x0007c783, 0xfe0796e3, 0xfe843703, 0xfd843783, 0x40f707b3, 0x00078513, 0x02813403, 0x03010113, 0x00008067, 0xfd010113, 0x02813423, 0x03010413, 0xfca43c23, 0xfcb43823, 0xfd843783, 0xfef43423, 0x0100006f, 0xfe843783, 0x00178793, 0xfef43423, 0xfd043783, 0xfff78713, 0xfce43823, 0x00078863, 0xfe843783, 0x0007c783, 0xfc079ee3, 0xfe843703, 0xfd843783, 0x40f707b3, 0x00078513, 0x02813403, 0x03010113, 0x00008067, 0xfd010113, 0x02813423, 0x03010413, 0xfca43c23, 0xfcb43823, 0xfd843783, 0x00178713, 0xfce43c23, 0x0007c783, 0xfef407a3, 0xfd043783, 0x00178713, 0xfce43823, 0x0007c783, 0xfef40723, 0xfef44783, 0x0ff7f793, 0x00078c63, 0xfef44703, 0xfee44783, 0x0ff77713, 0x0ff7f793, 0xfaf70ee3, 0xfef44783, 0x0007871b, 0xfee44783, 0x0007879b, 0x40f707bb, 0x0007879b, 0x00078513, 0x02813403, 0x03010113, 0x00008067, 0xfd010113, 0x02813423, 0x03010413, 0xfca43c23, 0xfcb43823, 0xfd843783, 0xfef43423, 0x00000013, 0xfd043703, 0x00170793, 0xfcf43823, 0xfe843783, 0x00178693, 0xfed43423, 0x00074703, 0x00e78023, 0x0007c783, 0xfc079ee3, 0xfd843783, 0x00078513, 0x02813403, 0x03010113, 0x00008067, 0xfd010113, 0x02813423, 0x03010413, 0xfca43c23, 0xfe043423, 0xfe042223, 0x0100006f, 0xfd843783, 0x00178793, 0xfcf43c23, 0xfd843783, 0x0007c783, 0x00078713, 0x02000793, 0xfef702e3, 0xfd843783, 0x0007c783, 0x00078713, 0x02d00793, 0x00f70c63, 0xfd843783, 0x0007c783, 0x00078713, 0x02b00793, 0x06f71c63, 0xfd843783, 0x0007c783, 0x0007871b, 0x02d00793, 0x40f707b3, 0x0017b793, 0x0ff7f793, 0xfef42223, 0xfd843783, 0x00178793, 0xfcf43c23, 0x0480006f, 0xfe843703, 0x00070793, 0x00279793, 0x00e787b3, 0x00179793, 0xfef43423, 0xfd843783, 0x00178713, 0xfce43c23, 0x0007c783, 0x0007879b, 0xfd07879b, 0x0007879b, 0x00078713, 0xfe843783, 0x00e787b3, 0xfef43423, 0xfd843783, 0x0007c783, 0xfa079ae3, 0xfe442783, 0x0007879b, 0x00078863, 0xfe843783, 0x40f007b3, 0x0080006f, 0xfe843783, 0x00078513, 0x02813403, 0x03010113, 0x00008067, 0x6f422009, 0x674d746f, 0x52203a72, 0x43657369, 0x6b656572, 0x79617320, 0x65482073, 0x2c6f6c6c, 0x6f6f6220, 0x20646574, 0x6d6f7266, 0x43324920, 0x202d2d20, 0x6f6a6552, 0x20656369, 0x0000000a, 0x6379636d, 0x0000656c, 0x736e696d, 0x74657274, 0x00000000, 0x00000000, 0x6c706d49, 0x6e656d65, 0x616d2074, 0x29286e69, 0x6f66202c, 0x000a216f, 0x3d207325, 0x0a642520, 0x00000000, 0x00000000, 0x6c756e28, 0x0000296c, 0xfffff6b0, 0xfffff910, 0xfffff8fc, 0xfffff910, 0xfffff910, 0xfffff910, 0xfffff910, 0xfffff684, 0xfffff910, 0xfffff910, 0xfffff60c, 0xfffff69c, 0xfffff910, 0xfffff618, 0xfffff624, 0xfffff624, 0xfffff624, 0xfffff624, 0xfffff624, 0xfffff624, 0xfffff624, 0xfffff624, 0xfffff624, 0xfffff910, 0xfffff910, 0xfffff910, 0xfffff910, 0xfffff910, 0xfffff910, 0xfffff910, 0xfffff910, 0xfffff910, 0xfffff910, 0xfffff910, 0xfffff910, 0xfffff910, 0xfffff910, 0xfffff910, 0xfffff910, 0xfffff910, 0xfffff910, 0xfffff910, 0xfffff910, 0xfffff910, 0xfffff910, 0xfffff910, 0xfffff910, 0xfffff910, 0xfffff910, 0xfffff910, 0xfffff910, 0xfffff910, 0xfffff910, 0xfffff910, 0xfffff910, 0xfffff910, 0xfffff910, 0xfffff910, 0xfffff910, 0xfffff910, 0xfffff910, 0xfffff910, 0xfffff910, 0xfffff910, 0xfffff6f0, 0xfffff82c, 0xfffff910, 0xfffff910, 0xfffff910, 0xfffff910, 0xfffff910, 0xfffff910, 0xfffff910, 0xfffff6e0, 0xfffff910, 0xfffff910, 0xfffff884, 0xfffff890, 0xfffff910, 0xfffff910, 0xfffff714, 0xfffff910, 0xfffff878, 0xfffff910, 0xfffff910, 0xfffff8b8, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000};

	@../DMA/dma.h

1 #i‚de‡
DMA_H


2 
	#DMA_H


	)

4 
	~<°dlib.h
>

7 
	#DMA_ISR
 0x00011600

	)

8 
	#DMA_IFCR
 0x00011604

	)

9 
	#DMA_CSELR
 0x000116B0

	)

12 
	#DMA_CCR1
 0x00011608

	)

13 
	#DMA_CNDTR1
 0x0001160C

	)

14 
	#DMA_CPAR1
 0x00011610

	)

15 
	#DMA_CMAR1
 0x00011618

	)

18 
	#DMA_CCR2
 0x00011620

	)

19 
	#DMA_CNDTR2
 0x00011624

	)

20 
	#DMA_CPAR2
 0x00011628

	)

21 
	#DMA_CMAR2
 0x00011630

	)

24 
	#DMA_CCR3
 0x00011638

	)

25 
	#DMA_CNDTR3
 0x0001163C

	)

26 
	#DMA_CPAR3
 0x00011640

	)

27 
	#DMA_CMAR3
 0x00011648

	)

30 
	#DMA_CCR4
 0x00011650

	)

31 
	#DMA_CNDTR4
 0x00011654

	)

32 
	#DMA_CPAR4
 0x00011658

	)

33 
	#DMA_CMAR4
 0x00011660

	)

36 
	#DMA_CCR5
 0x00011668

	)

37 
	#DMA_CNDTR5
 0x0001166C

	)

38 
	#DMA_CPAR5
 0x00011670

	)

39 
	#DMA_CMAR5
 0x00011678

	)

42 
	#DMA_CCR6
 0x00011680

	)

43 
	#DMA_CNDTR6
 0x00011684

	)

44 
	#DMA_CPAR6
 0x00011688

	)

45 
	#DMA_CMAR6
 0x00011690

	)

48 
	#DMA_CCR7
 0x00011698

	)

49 
	#DMA_CNDTR7
 0x0001169C

	)

50 
	#DMA_CPAR7
 0x000116A0

	)

51 
	#DMA_CMAR7
 0x000116A8

	)

57 
	#DMA_ISR_TEIF7
 (1<<27)

	)

58 
	#DMA_ISR_TEIF6
 (1<<23)

	)

59 
	#DMA_ISR_TEIF5
 (1<<19)

	)

60 
	#DMA_ISR_TEIF4
 (1<<15)

	)

61 
	#DMA_ISR_TEIF3
 (1<<11)

	)

62 
	#DMA_ISR_TEIF2
 (1<<7 )

	)

63 
	#DMA_ISR_TEIF1
 (1<<3 )

	)

67 
	#DMA_ISR_HTIF7
 (1<<26)

	)

68 
	#DMA_ISR_HTIF6
 (1<<22)

	)

69 
	#DMA_ISR_HTIF5
 (1<<18)

	)

70 
	#DMA_ISR_HTIF4
 (1<<14)

	)

71 
	#DMA_ISR_HTIF3
 (1<<10)

	)

72 
	#DMA_ISR_HTIF2
 (1<<6 )

	)

73 
	#DMA_ISR_HTIF1
 (1<<2 )

	)

76 
	#DMA_ISR_TCIF7
 (1<<25)

	)

77 
	#DMA_ISR_TCIF6
 (1<<21)

	)

78 
	#DMA_ISR_TCIF5
 (1<<17)

	)

79 
	#DMA_ISR_TCIF4
 (1<<13)

	)

80 
	#DMA_ISR_TCIF3
 (1<<9)

	)

81 
	#DMA_ISR_TCIF2
 (1<<5 )

	)

82 
	#DMA_ISR_TCIF1
 (1<<1 )

	)

85 
	#DMA_ISR_GIF7
 (1<<24)

	)

86 
	#DMA_ISR_GIF6
 (1<<20)

	)

87 
	#DMA_ISR_GIF5
 (1<<16)

	)

88 
	#DMA_ISR_GIF4
 (1<<12)

	)

89 
	#DMA_ISR_GIF3
 (1<<8)

	)

90 
	#DMA_ISR_GIF2
 (1<<4 )

	)

91 
	#DMA_ISR_GIF1
 (1<<0 )

	)

94 
	#DMA_CTEIF7
 (1<<27)

	)

95 
	#DMA_CTEIF6
 (1<<23)

	)

96 
	#DMA_CTEIF5
 (1<<19)

	)

97 
	#DMA_CTEIF4
 (1<<15)

	)

98 
	#DMA_CTEIF3
 (1<<11)

	)

99 
	#DMA_CTEIF2
 (1<<7 )

	)

100 
	#DMA_CTEIF1
 (1<<3 )

	)

103 
	#DMA_ISR_CHTIF7
 (1<<26)

	)

104 
	#DMA_ISR_CHTIF6
 (1<<22)

	)

105 
	#DMA_ISR_CHTIF5
 (1<<18)

	)

106 
	#DMA_ISR_CHTIF4
 (1<<14)

	)

107 
	#DMA_ISR_CHTIF3
 (1<<10)

	)

108 
	#DMA_ISR_CHTIF2
 (1<<6 )

	)

109 
	#DMA_ISR_CHTIF1
 (1<<2 )

	)

112 
	#DMA_ISR_CTCIF7
 (1<<25)

	)

113 
	#DMA_ISR_CTCIF6
 (1<<21)

	)

114 
	#DMA_ISR_CTCIF5
 (1<<17)

	)

115 
	#DMA_ISR_CTCIF4
 (1<<13)

	)

116 
	#DMA_ISR_CTCIF3
 (1<<9 )

	)

117 
	#DMA_ISR_CTCIF2
 (1<<5 )

	)

118 
	#DMA_ISR_CTCIF1
 (1<<1 )

	)

121 
	#DMA_ISR_CGIF7
 (1<<24)

	)

122 
	#DMA_ISR_CGIF6
 (1<<20)

	)

123 
	#DMA_ISR_CGIF5
 (1<<16)

	)

124 
	#DMA_ISR_CGIF4
 (1<<12)

	)

125 
	#DMA_ISR_CGIF3
 (1<<8 )

	)

126 
	#DMA_ISR_CGIF2
 (1<<4 )

	)

127 
	#DMA_ISR_CGIF1
 (1<<0 )

	)

131 
	#DMA_CCR_BURST_LEN
(
x
Ë(x<<16)

	)

132 
	#DMA_CCR_MEM2MEM
 (1<<14)

	)

133 
	#DMA_CCR_PL
(
x
) (x<<12)

134 
	#DMA_CCR_MSIZE
(
x
) (x<<10)

135 
	#DMA_CCR_PSIZE
(
x
) (x<<8 )

136 
	#DMA_CCR_MINC
 (1<<7 )

	)

137 
	#DMA_CCR_PINC
 (1<<6 )

	)

138 
	#DMA_CCR_CIRC
 (1<<5 )

	)

139 
	#DMA_CCR_DIR
 (1<<4 )

	)

140 
	#DMA_CCR_TEIE
 (1<<3 )

	)

141 
	#DMA_CCR_HTIE
 (1<<2 )

	)

142 
	#DMA_CCR_TCIE
 (1<<1 )

	)

143 
	#DMA_CCR_EN
 (1<<0 )

	)

146 
	#DMA_CNDTR_NDT
(
x
Ë
	)
x

149 
	#DMA_CPAR_PA
(
x
Ë
	)
x

152 
	#DMA_CMAR_MA
(
x
Ë
	)
x

155 
	#DMA_BYTE
 0x0

	)

156 
	#DMA_TWOBYTE
 0x1

	)

157 
	#DMA_FOURBYTE
 0x2

	)

158 
	#DMA_EIGHTBYTE
 0x3

	)

166 * 
	gdma_i§
 = (c⁄° *Ë
DMA_ISR
;

167 * 
	gdma_if¸
 = (c⁄° *Ë
DMA_IFCR
;

168 * 
	gdma_c¸1
 = (c⁄° *Ë
DMA_CCR1
;

169 * 
	gdma_˙då1
 = (c⁄° *Ë
DMA_CNDTR1
;

170 * 
	gdma_˝¨1
 = (c⁄° *Ë
DMA_CPAR1
;

171 * 
	gdma_cm¨1
 = (c⁄° *Ë
DMA_CMAR1
;

172 * 
	gdma_c¸2
 = (c⁄° *Ë
DMA_CCR2
;

173 * 
	gdma_˙då2
 = (c⁄° *Ë
DMA_CNDTR2
;

174 * 
	gdma_˝¨2
 = (c⁄° *Ë
DMA_CPAR2
;

175 * 
	gdma_cm¨2
 = (c⁄° *Ë
DMA_CMAR2
;

176 * 
	gdma_c¸3
 = (c⁄° *Ë
DMA_CCR3
;

177 * 
	gdma_˙då3
 = (c⁄° *Ë
DMA_CNDTR3
;

178 * 
	gdma_˝¨3
 = (c⁄° *Ë
DMA_CPAR3
;

179 * 
	gdma_cm¨3
 = (c⁄° *Ë
DMA_CMAR3
;

180 * 
	gdma_c¸4
 = (c⁄° *Ë
DMA_CCR4
;

181 * 
	gdma_˙då4
 = (c⁄° *Ë
DMA_CNDTR4
;

182 * 
	gdma_˝¨4
 = (c⁄° *Ë
DMA_CPAR4
;

183 * 
	gdma_cm¨4
 = (c⁄° *Ë
DMA_CMAR4
;

184 * 
	gdma_c¸5
 = (c⁄° *Ë
DMA_CCR5
;

185 * 
	gdma_˙då5
 = (c⁄° *Ë
DMA_CNDTR5
;

186 * 
	gdma_˝¨5
 = (c⁄° *Ë
DMA_CPAR5
;

187 * 
	gdma_cm¨5
 = (c⁄° *Ë
DMA_CMAR5
;

188 * 
	gdma_c¸6
 = (c⁄° *Ë
DMA_CCR6
;

189 * 
	gdma_˙då6
 = (c⁄° *Ë
DMA_CNDTR6
;

190 * 
	gdma_˝¨6
 = (c⁄° *Ë
DMA_CPAR6
;

191 * 
	gdma_cm¨6
 = (c⁄° *Ë
DMA_CMAR6
;

192 * 
	gdma_c¸7
 = (c⁄° *Ë
DMA_CCR7
;

193 * 
	gdma_˙då7
 = (c⁄° *Ë
DMA_CNDTR7
;

194 * 
	gdma_˝¨7
 = (c⁄° *Ë
DMA_CPAR7
;

195 * 
	gdma_cm¨7
 = (c⁄° *Ë
DMA_CMAR7
;

196 * 
	gdma_c£Ã
 = (c⁄° *Ë
DMA_CSELR
;

198 
	$£t_dma_shakti
(*
addr
, 
vÆ
)

200 *
addr
 = 
vÆ
;

201 
	}
}

203 
	$gë_dma_shakti
(*
addr
)

205  *
addr
;

206 
	}
}

	@/usr/include/stdint.h

22 #i‚de‡
_STDINT_H


23 
	#_STDINT_H
 1

	)

25 
	~<„©uªs.h
>

26 
	~<bôs/wch¨.h
>

27 
	~<bôs/w‹dsize.h
>

34 #i‚de‡
__öt8_t_deföed


35 
	#__öt8_t_deföed


	)

36 sig√d 
	töt8_t
;

37 
	töt16_t
;

38 
	töt32_t
;

39 #i‡
__WORDSIZE
 == 64

40 
	töt64_t
;

42 
__exãnsi⁄__


43 
	töt64_t
;

48 
	tuöt8_t
;

49 
	tuöt16_t
;

50 #i‚de‡
__uöt32_t_deföed


51 
	tuöt32_t
;

52 
	#__uöt32_t_deföed


	)

54 #i‡
__WORDSIZE
 == 64

55 
	tuöt64_t
;

57 
__exãnsi⁄__


58 
	tuöt64_t
;

65 sig√d 
	töt_Àa°8_t
;

66 
	töt_Àa°16_t
;

67 
	töt_Àa°32_t
;

68 #i‡
__WORDSIZE
 == 64

69 
	töt_Àa°64_t
;

71 
__exãnsi⁄__


72 
	töt_Àa°64_t
;

76 
	tuöt_Àa°8_t
;

77 
	tuöt_Àa°16_t
;

78 
	tuöt_Àa°32_t
;

79 #i‡
__WORDSIZE
 == 64

80 
	tuöt_Àa°64_t
;

82 
__exãnsi⁄__


83 
	tuöt_Àa°64_t
;

90 sig√d 
	töt_Á°8_t
;

91 #i‡
__WORDSIZE
 == 64

92 
	töt_Á°16_t
;

93 
	töt_Á°32_t
;

94 
	töt_Á°64_t
;

96 
	töt_Á°16_t
;

97 
	töt_Á°32_t
;

98 
__exãnsi⁄__


99 
	töt_Á°64_t
;

103 
	tuöt_Á°8_t
;

104 #i‡
__WORDSIZE
 == 64

105 
	tuöt_Á°16_t
;

106 
	tuöt_Á°32_t
;

107 
	tuöt_Á°64_t
;

109 
	tuöt_Á°16_t
;

110 
	tuöt_Á°32_t
;

111 
__exãnsi⁄__


112 
	tuöt_Á°64_t
;

117 #i‡
__WORDSIZE
 == 64

118 #i‚de‡
__öçå_t_deföed


119 
	töçå_t
;

120 
	#__öçå_t_deföed


	)

122 
	tuöçå_t
;

124 #i‚de‡
__öçå_t_deföed


125 
	töçå_t
;

126 
	#__öçå_t_deföed


	)

128 
	tuöçå_t
;

133 #i‡
__WORDSIZE
 == 64

134 
	tötmax_t
;

135 
	tuötmax_t
;

137 
__exãnsi⁄__


138 
	tötmax_t
;

139 
__exãnsi⁄__


140 
	tuötmax_t
;

144 #i‡
__WORDSIZE
 == 64

145 
	#__INT64_C
(
c
Ë¯## 
L


	)

146 
	#__UINT64_C
(
c
Ë¯## 
UL


	)

148 
	#__INT64_C
(
c
Ë¯## 
LL


	)

149 
	#__UINT64_C
(
c
Ë¯## 
ULL


	)

155 
	#INT8_MIN
 (-128)

	)

156 
	#INT16_MIN
 (-32767-1)

	)

157 
	#INT32_MIN
 (-2147483647-1)

	)

158 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

160 
	#INT8_MAX
 (127)

	)

161 
	#INT16_MAX
 (32767)

	)

162 
	#INT32_MAX
 (2147483647)

	)

163 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

166 
	#UINT8_MAX
 (255)

	)

167 
	#UINT16_MAX
 (65535)

	)

168 
	#UINT32_MAX
 (4294967295U)

	)

169 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

173 
	#INT_LEAST8_MIN
 (-128)

	)

174 
	#INT_LEAST16_MIN
 (-32767-1)

	)

175 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

176 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

178 
	#INT_LEAST8_MAX
 (127)

	)

179 
	#INT_LEAST16_MAX
 (32767)

	)

180 
	#INT_LEAST32_MAX
 (2147483647)

	)

181 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

184 
	#UINT_LEAST8_MAX
 (255)

	)

185 
	#UINT_LEAST16_MAX
 (65535)

	)

186 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

187 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

191 
	#INT_FAST8_MIN
 (-128)

	)

192 #i‡
__WORDSIZE
 == 64

193 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

194 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

196 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

197 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

199 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

201 
	#INT_FAST8_MAX
 (127)

	)

202 #i‡
__WORDSIZE
 == 64

203 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

204 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

206 
	#INT_FAST16_MAX
 (2147483647)

	)

207 
	#INT_FAST32_MAX
 (2147483647)

	)

209 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

212 
	#UINT_FAST8_MAX
 (255)

	)

213 #i‡
__WORDSIZE
 == 64

214 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

215 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

217 
	#UINT_FAST16_MAX
 (4294967295U)

	)

218 
	#UINT_FAST32_MAX
 (4294967295U)

	)

220 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

224 #i‡
__WORDSIZE
 == 64

225 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

226 
	#INTPTR_MAX
 (9223372036854775807L)

	)

227 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

229 
	#INTPTR_MIN
 (-2147483647-1)

	)

230 
	#INTPTR_MAX
 (2147483647)

	)

231 
	#UINTPTR_MAX
 (4294967295U)

	)

236 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

238 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

241 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

247 #i‡
__WORDSIZE
 == 64

248 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

249 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

251 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

252 
	#PTRDIFF_MAX
 (2147483647)

	)

256 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

257 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

260 #i‡
__WORDSIZE
 == 64

261 
	#SIZE_MAX
 (18446744073709551615UL)

	)

263 #ifde‡
__WORDSIZE32_SIZE_ULONG


264 
	#SIZE_MAX
 (4294967295UL)

	)

266 
	#SIZE_MAX
 (4294967295U)

	)

271 #i‚de‡
WCHAR_MIN


273 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

274 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

278 
	#WINT_MIN
 (0u)

	)

279 
	#WINT_MAX
 (4294967295u)

	)

282 
	#INT8_C
(
c
Ë
	)
c

283 
	#INT16_C
(
c
Ë
	)
c

284 
	#INT32_C
(
c
Ë
	)
c

285 #i‡
__WORDSIZE
 == 64

286 
	#INT64_C
(
c
Ë¯## 
L


	)

288 
	#INT64_C
(
c
Ë¯## 
LL


	)

292 
	#UINT8_C
(
c
Ë
	)
c

293 
	#UINT16_C
(
c
Ë
	)
c

294 
	#UINT32_C
(
c
Ë¯## 
U


	)

295 #i‡
__WORDSIZE
 == 64

296 
	#UINT64_C
(
c
Ë¯## 
UL


	)

298 
	#UINT64_C
(
c
Ë¯## 
ULL


	)

302 #i‡
__WORDSIZE
 == 64

303 
	#INTMAX_C
(
c
Ë¯## 
L


	)

304 
	#UINTMAX_C
(
c
Ë¯## 
UL


	)

306 
	#INTMAX_C
(
c
Ë¯## 
LL


	)

307 
	#UINTMAX_C
(
c
Ë¯## 
ULL


	)

	@/usr/include/bits/wchar.h

19 #i‚de‡
_BITS_WCHAR_H


20 
	#_BITS_WCHAR_H
 1

	)

33 #ifde‡
__WCHAR_MAX__


34 
	#__WCHAR_MAX
 
__WCHAR_MAX__


	)

35 #ñi‡
L
'\0' - 1 > 0

36 
	#__WCHAR_MAX
 (0xffffffffu + 
L
'\0')

	)

38 
	#__WCHAR_MAX
 (0x7ffffff‡+ 
L
'\0')

	)

41 #ifde‡
__WCHAR_MIN__


42 
	#__WCHAR_MIN
 
__WCHAR_MIN__


	)

43 #ñi‡
L
'\0' - 1 > 0

44 
	#__WCHAR_MIN
 (
L
'\0' + 0)

	)

46 
	#__WCHAR_MIN
 (-
__WCHAR_MAX
 - 1)

	)

	@/usr/include/bits/wordsize.h

3 #i‡
deföed
 
__x86_64__
 && !deföed 
__ILP32__


4 
	#__WORDSIZE
 64

	)

6 
	#__WORDSIZE
 32

	)

9 #ifde‡
__x86_64__


10 
	#__WORDSIZE_TIME64_COMPAT32
 1

	)

12 
	#__SYSCALL_WORDSIZE
 64

	)

	@/usr/include/features.h

18 #i‚def 
_FEATURES_H


19 
	#_FEATURES_H
 1

	)

97 #unde‡
__USE_ISOC11


98 #unde‡
__USE_ISOC99


99 #unde‡
__USE_ISOC95


100 #unde‡
__USE_ISOCXX11


101 #unde‡
__USE_POSIX


102 #unde‡
__USE_POSIX2


103 #unde‡
__USE_POSIX199309


104 #unde‡
__USE_POSIX199506


105 #unde‡
__USE_XOPEN


106 #unde‡
__USE_XOPEN_EXTENDED


107 #unde‡
__USE_UNIX98


108 #unde‡
__USE_XOPEN2K


109 #unde‡
__USE_XOPEN2KXSI


110 #unde‡
__USE_XOPEN2K8


111 #unde‡
__USE_XOPEN2K8XSI


112 #unde‡
__USE_LARGEFILE


113 #unde‡
__USE_LARGEFILE64


114 #unde‡
__USE_FILE_OFFSET64


115 #unde‡
__USE_MISC


116 #unde‡
__USE_ATFILE


117 #unde‡
__USE_GNU


118 #unde‡
__USE_REENTRANT


119 #unde‡
__USE_FORTIFY_LEVEL


120 #unde‡
__KERNEL_STRICT_NAMES


124 #i‚de‡
_LOOSE_KERNEL_NAMES


125 
	#__KERNEL_STRICT_NAMES


	)

135 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


136 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

137 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

139 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

146 #i‡(
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE
) \

147 && !
deföed
 
	g_DEFAULT_SOURCE


152 #unde‡
_DEFAULT_SOURCE


153 
	#_DEFAULT_SOURCE
 1

	)

157 #ifde‡
_GNU_SOURCE


158 #unde‡
_ISOC95_SOURCE


159 
	#_ISOC95_SOURCE
 1

	)

160 #unde‡
_ISOC99_SOURCE


161 
	#_ISOC99_SOURCE
 1

	)

162 #unde‡
_ISOC11_SOURCE


163 
	#_ISOC11_SOURCE
 1

	)

164 #unde‡
_POSIX_SOURCE


165 
	#_POSIX_SOURCE
 1

	)

166 #unde‡
_POSIX_C_SOURCE


167 
	#_POSIX_C_SOURCE
 200809L

	)

168 #unde‡
_XOPEN_SOURCE


169 
	#_XOPEN_SOURCE
 700

	)

170 #unde‡
_XOPEN_SOURCE_EXTENDED


171 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

172 #unde‡
_LARGEFILE64_SOURCE


173 
	#_LARGEFILE64_SOURCE
 1

	)

174 #unde‡
_DEFAULT_SOURCE


175 
	#_DEFAULT_SOURCE
 1

	)

176 #unde‡
_ATFILE_SOURCE


177 
	#_ATFILE_SOURCE
 1

	)

182 #i‡(
deföed
 
_DEFAULT_SOURCE
 \

183 || (!
deföed
 
	g__STRICT_ANSI__
 \

184 && !
deföed
 
	g_ISOC99_SOURCE
 \

185 && !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 \

186 && !
deföed
 
	g_XOPEN_SOURCE
))

187 #unde‡
_DEFAULT_SOURCE


188 
	#_DEFAULT_SOURCE
 1

	)

192 #i‡(
deföed
 
_ISOC11_SOURCE
 \

193 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 201112L))

194 
	#__USE_ISOC11
 1

	)

198 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

199 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

200 
	#__USE_ISOC99
 1

	)

204 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

205 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

206 
	#__USE_ISOC95
 1

	)

213 #i‡((
deföed
 
__˝lu•lus
 && __cplusplus >= 201103L) \

214 || 
deföed
 
__GXX_EXPERIMENTAL_CXX0X__
)

215 
	#__USE_ISOCXX11
 1

	)

221 #ifde‡
_DEFAULT_SOURCE


222 #i‡!
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE


223 
	#__USE_POSIX_IMPLICITLY
 1

	)

225 #unde‡
_POSIX_SOURCE


226 
	#_POSIX_SOURCE
 1

	)

227 #unde‡
_POSIX_C_SOURCE


228 
	#_POSIX_C_SOURCE
 200809L

	)

230 #i‡((!
deföed
 
__STRICT_ANSI__
 \

231 || (
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) >= 500)) \

232 && !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

233 
	#_POSIX_SOURCE
 1

	)

234 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

235 
	#_POSIX_C_SOURCE
 2

	)

236 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

237 
	#_POSIX_C_SOURCE
 199506L

	)

238 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

239 
	#_POSIX_C_SOURCE
 200112L

	)

241 
	#_POSIX_C_SOURCE
 200809L

	)

243 
	#__USE_POSIX_IMPLICITLY
 1

	)

246 #i‡(
deföed
 
_POSIX_SOURCE
 \

247 || (
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >= 1) \

248 || 
deföed
 
_XOPEN_SOURCE
)

249 
	#__USE_POSIX
 1

	)

252 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


253 
	#__USE_POSIX2
 1

	)

256 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199309L

257 
	#__USE_POSIX199309
 1

	)

260 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199506L

261 
	#__USE_POSIX199506
 1

	)

264 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200112L

265 
	#__USE_XOPEN2K
 1

	)

266 #unde‡
__USE_ISOC95


267 
	#__USE_ISOC95
 1

	)

268 #unde‡
__USE_ISOC99


269 
	#__USE_ISOC99
 1

	)

272 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200809L

273 
	#__USE_XOPEN2K8
 1

	)

274 #unde‡
_ATFILE_SOURCE


275 
	#_ATFILE_SOURCE
 1

	)

278 #ifdef 
_XOPEN_SOURCE


279 
	#__USE_XOPEN
 1

	)

280 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

281 
	#__USE_XOPEN_EXTENDED
 1

	)

282 
	#__USE_UNIX98
 1

	)

283 #unde‡
_LARGEFILE_SOURCE


284 
	#_LARGEFILE_SOURCE
 1

	)

285 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

286 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

287 
	#__USE_XOPEN2K8
 1

	)

288 
	#__USE_XOPEN2K8XSI
 1

	)

290 
	#__USE_XOPEN2K
 1

	)

291 
	#__USE_XOPEN2KXSI
 1

	)

292 #unde‡
__USE_ISOC95


293 
	#__USE_ISOC95
 1

	)

294 #unde‡
__USE_ISOC99


295 
	#__USE_ISOC99
 1

	)

298 #ifde‡
_XOPEN_SOURCE_EXTENDED


299 
	#__USE_XOPEN_EXTENDED
 1

	)

304 #ifde‡
_LARGEFILE_SOURCE


305 
	#__USE_LARGEFILE
 1

	)

308 #ifde‡
_LARGEFILE64_SOURCE


309 
	#__USE_LARGEFILE64
 1

	)

312 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

313 
	#__USE_FILE_OFFSET64
 1

	)

316 #i‡
deföed
 
_DEFAULT_SOURCE


317 
	#__USE_MISC
 1

	)

320 #ifdef 
_ATFILE_SOURCE


321 
	#__USE_ATFILE
 1

	)

324 #ifdef 
_GNU_SOURCE


325 
	#__USE_GNU
 1

	)

328 #i‡
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE


329 
	#__USE_REENTRANT
 1

	)

332 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

333 && 
__GNUC_PREREQ
 (4, 1Ë&& 
deföed
 
	g__OPTIMIZE__
 && __OPTIMIZE__ > 0

334 #i‡
_FORTIFY_SOURCE
 > 1

335 
	#__USE_FORTIFY_LEVEL
 2

	)

337 
	#__USE_FORTIFY_LEVEL
 1

	)

340 
	#__USE_FORTIFY_LEVEL
 0

	)

345 
	~<°dc-¥edef.h
>

353 #unde‡
__GNU_LIBRARY__


354 
	#__GNU_LIBRARY__
 6

	)

358 
	#__GLIBC__
 2

	)

359 
	#__GLIBC_MINOR__
 23

	)

361 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

362 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

365 #i‚de‡
__ASSEMBLER__


366 #i‚de‡
_SYS_CDEFS_H


367 
	~<sys/cdefs.h
>

372 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


373 
	#__USE_LARGEFILE
 1

	)

374 
	#__USE_LARGEFILE64
 1

	)

380 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

381 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

382 && 
deföed
 
	g__exã∫_ölöe


383 
	#__USE_EXTERN_INLINES
 1

	)

391 
	~<gnu/°ubs.h
>

	@/usr/include/stdlib.h

22 #i‚def 
_STDLIB_H


24 
	~<„©uªs.h
>

27 
	#__√ed_size_t


	)

28 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


29 
	#__√ed_wch¨_t


	)

30 
	#__√ed_NULL


	)

32 
	~<°ddef.h
>

34 
	g__BEGIN_DECLS


36 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


37 
	#_STDLIB_H
 1

	)

39 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
Ë&& !deföed 
_SYS_WAIT_H


41 
	~<bôs/waôÊags.h
>

42 
	~<bôs/waô°©us.h
>

44 #ifde‡
__USE_MISC


49 #i‡
deföed
 
__GNUC__
 && !deföed 
__˝lu•lus


50 
	#__WAIT_INT
(
°©us
) \

51 (
	`__exãnsi⁄__
 (((uni⁄ { 
	`__ty≥of
(
°©us
Ë
__ö
; 
__i
; }) \

52 { .
__ö
 = (
°©us
Ë}).
__i
))

	)

54 
	#__WAIT_INT
(
°©us
Ë(*(*Ë&(°©us))

	)

62 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2 || deföed 
__˝lu•lus


63 
	#__WAIT_STATUS
 *

	)

64 
	#__WAIT_STATUS_DEFN
 *

	)

69 
waô
 *
	m__u±r
;

70 *
	m__ùå
;

71 } 
	t__WAIT_STATUS
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

72 
	#__WAIT_STATUS_DEFN
 *

	)

77 
	#__WAIT_INT
(
°©us
Ë(°©us)

	)

78 
	#__WAIT_STATUS
 *

	)

79 
	#__WAIT_STATUS_DEFN
 *

	)

84 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (
	`__WAIT_INT
 (°©us))

	)

85 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (
	`__WAIT_INT
 (°©us))

	)

86 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (
	`__WAIT_INT
 (°©us))

	)

87 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (
	`__WAIT_INT
 (°©us))

	)

88 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (
	`__WAIT_INT
 (°©us))

	)

89 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (
	`__WAIT_INT
 (°©us))

	)

90 #ifde‡
__WIFCONTINUED


91 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (
	`__WAIT_INT
 (°©us))

	)

95 
__BEGIN_NAMESPACE_STD


99 
	mquŸ
;

100 
	mªm
;

101 } 
	tdiv_t
;

104 #i‚de‡
__ldiv_t_deföed


107 
	mquŸ
;

108 
	mªm
;

109 } 
	tldiv_t
;

110 
	#__ldiv_t_deföed
 1

	)

112 
	g__END_NAMESPACE_STD


114 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


115 
__BEGIN_NAMESPACE_C99


117 
__exãnsi⁄__
 struct

119 
	mquŸ
;

120 
	mªm
;

121 } 
	tŒdiv_t
;

122 
	#__Œdiv_t_deföed
 1

	)

123 
	g__END_NAMESPACE_C99


128 
	#RAND_MAX
 2147483647

	)

133 
	#EXIT_FAILURE
 1

	)

134 
	#EXIT_SUCCESS
 0

	)

138 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

139 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

142 
__BEGIN_NAMESPACE_STD


144 
	$©of
 (c⁄° *
__≈å
)

145 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

147 
	$©oi
 (c⁄° *
__≈å
)

148 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

150 
	$©ﬁ
 (c⁄° *
__≈å
)

151 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

152 
__END_NAMESPACE_STD


154 #ifde‡
__USE_ISOC99


155 
__BEGIN_NAMESPACE_C99


157 
__exãnsi⁄__
 
	$©ﬁl
 (c⁄° *
__≈å
)

158 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

159 
__END_NAMESPACE_C99


162 
__BEGIN_NAMESPACE_STD


164 
	$°πod
 (c⁄° *
__ª°ri˘
 
__≈å
,

165 **
__ª°ri˘
 
__íd±r
)

166 
__THROW
 
	`__n⁄nuŒ
 ((1));

167 
__END_NAMESPACE_STD


169 #ifdef 
__USE_ISOC99


170 
__BEGIN_NAMESPACE_C99


172 
	$°πof
 (c⁄° *
__ª°ri˘
 
__≈å
,

173 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

175 
	$°πﬁd
 (c⁄° *
__ª°ri˘
 
__≈å
,

176 **
__ª°ri˘
 
__íd±r
)

177 
__THROW
 
	`__n⁄nuŒ
 ((1));

178 
__END_NAMESPACE_C99


181 
__BEGIN_NAMESPACE_STD


183 
	$°πﬁ
 (c⁄° *
__ª°ri˘
 
__≈å
,

184 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

185 
__THROW
 
	`__n⁄nuŒ
 ((1));

187 
	$°πoul
 (c⁄° *
__ª°ri˘
 
__≈å
,

188 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

189 
__THROW
 
	`__n⁄nuŒ
 ((1));

190 
__END_NAMESPACE_STD


192 #ifde‡
__USE_MISC


194 
__exãnsi⁄__


195 
	$°πoq
 (c⁄° *
__ª°ri˘
 
__≈å
,

196 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

197 
__THROW
 
	`__n⁄nuŒ
 ((1));

199 
__exãnsi⁄__


200 
	$°πouq
 (c⁄° *
__ª°ri˘
 
__≈å
,

201 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

202 
__THROW
 
	`__n⁄nuŒ
 ((1));

205 #ifde‡
__USE_ISOC99


206 
__BEGIN_NAMESPACE_C99


208 
__exãnsi⁄__


209 
	$°πﬁl
 (c⁄° *
__ª°ri˘
 
__≈å
,

210 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

211 
__THROW
 
	`__n⁄nuŒ
 ((1));

213 
__exãnsi⁄__


214 
	$°πouŒ
 (c⁄° *
__ª°ri˘
 
__≈å
,

215 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

216 
__THROW
 
	`__n⁄nuŒ
 ((1));

217 
__END_NAMESPACE_C99


221 #ifde‡
__USE_GNU


235 
	~<xloˇÀ.h
>

239 
	$°πﬁ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

240 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

241 
__loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

243 
	$°πoul_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

244 **
__ª°ri˘
 
__íd±r
,

245 
__ba£
, 
__loˇÀ_t
 
__loc
)

246 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

248 
__exãnsi⁄__


249 
	$°πﬁl_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

250 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

251 
__loˇÀ_t
 
__loc
)

252 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

254 
__exãnsi⁄__


255 
	$°πouŒ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

256 **
__ª°ri˘
 
__íd±r
,

257 
__ba£
, 
__loˇÀ_t
 
__loc
)

258 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

260 
	$°πod_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

261 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

262 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

264 
	$°πof_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

265 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

266 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

268 
	$°πﬁd_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

269 **
__ª°ri˘
 
__íd±r
,

270 
__loˇÀ_t
 
__loc
)

271 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

275 #ifde‡
__USE_EXTERN_INLINES


276 
__BEGIN_NAMESPACE_STD


277 
__exã∫_ölöe
 

278 
	`__NTH
 (
	$©oi
 (c⁄° *
__≈å
))

280  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

281 
	}
}

282 
__exã∫_ölöe
 

283 
__NTH
 (
	$©ﬁ
 (c⁄° *
__≈å
))

285  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

286 
	}
}

287 
	g__END_NAMESPACE_STD


289 #ifde‡
__USE_ISOC99


290 
__BEGIN_NAMESPACE_C99


291 
__exãnsi⁄__
 
__exã∫_ölöe
 

292 
__NTH
 (
	$©ﬁl
 (c⁄° *
__≈å
))

294  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

295 
	}
}

296 
	g__END_NAMESPACE_C99


301 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


305 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

308 
	$a64l
 (c⁄° *
__s
)

309 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

313 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


314 
	~<sys/ty≥s.h
>

321 
	$øndom
 (Ë
__THROW
;

324 
	$§™dom
 (
__£ed
Ë
__THROW
;

330 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

331 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

335 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

338 #ifde‡
__USE_MISC


343 
	søndom_d©a


345 
öt32_t
 *
Âå
;

346 
öt32_t
 *
Ωå
;

347 
öt32_t
 *
°©e
;

348 
ønd_ty≥
;

349 
ønd_deg
;

350 
ønd_£p
;

351 
öt32_t
 *
íd_±r
;

354 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

355 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

357 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

358 
__THROW
 
	`__n⁄nuŒ
 ((2));

360 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

361 
size_t
 
__°©ñí
,

362 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

363 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

365 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

366 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

367 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

372 
__BEGIN_NAMESPACE_STD


374 
	$ønd
 (Ë
__THROW
;

376 
	$§™d
 (
__£ed
Ë
__THROW
;

377 
__END_NAMESPACE_STD


379 #ifde‡
__USE_POSIX


381 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

385 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


389 
	$dønd48
 (Ë
__THROW
;

390 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

393 
	$Ã™d48
 (Ë
__THROW
;

394 
	$ƒ™d48
 (
__xsubi
[3])

395 
__THROW
 
	`__n⁄nuŒ
 ((1));

398 
	$mønd48
 (Ë
__THROW
;

399 
	$jønd48
 (
__xsubi
[3])

400 
__THROW
 
	`__n⁄nuŒ
 ((1));

403 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

404 *
	$£ed48
 (
__£ed16v
[3])

405 
__THROW
 
	`__n⁄nuŒ
 ((1));

406 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

408 #ifde‡
__USE_MISC


412 
	sdønd48_d©a


414 
__x
[3];

415 
__ﬁd_x
[3];

416 
__c
;

417 
__öô
;

418 
__exãnsi⁄__
 
__a
;

423 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

424 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

425 
	$î™d48_r
 (
__xsubi
[3],

426 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

427 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

430 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

431 *
__ª°ri˘
 
__ªsu…
)

432 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

433 
	$ƒ™d48_r
 (
__xsubi
[3],

434 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

435 *
__ª°ri˘
 
__ªsu…
)

436 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

439 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

440 *
__ª°ri˘
 
__ªsu…
)

441 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

442 
	$jønd48_r
 (
__xsubi
[3],

443 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

444 *
__ª°ri˘
 
__ªsu…
)

445 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

448 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

449 
__THROW
 
	`__n⁄nuŒ
 ((2));

451 
	$£ed48_r
 (
__£ed16v
[3],

452 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

454 
	$lc⁄g48_r
 (
__∑øm
[7],

455 
dønd48_d©a
 *
__buf„r
)

456 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

462 #i‚de‡
__mÆloc_™d_ˇŒoc_deföed


463 
	#__mÆloc_™d_ˇŒoc_deföed


	)

464 
__BEGIN_NAMESPACE_STD


466 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

468 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

469 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

470 
__END_NAMESPACE_STD


473 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


474 
__BEGIN_NAMESPACE_STD


480 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

481 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

483 
	$‰ì
 (*
__±r
Ë
__THROW
;

484 
__END_NAMESPACE_STD


486 #ifdef 
__USE_MISC


488 
	$c‰ì
 (*
__±r
Ë
__THROW
;

491 #ifde‡
__USE_MISC


492 
	~<Æloˇ.h
>

495 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

496 || 
deföed
 
__USE_MISC


498 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

501 #ifde‡
__USE_XOPEN2K


503 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

504 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

507 #ifde‡
__USE_ISOC11


509 *
	$Æig√d_Æloc
 (
size_t
 
__Æignmít
, size_à
__size
)

510 
__THROW
 
__©åibuã_mÆloc__
 
	`__©åibuã_Æloc_size__
 ((2)Ë
__wur
;

513 
__BEGIN_NAMESPACE_STD


515 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

519 
	$©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

521 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


523 #ifde‡
__˝lu•lus


524 "C++" 
	$©_quick_exô
 ((*
__func
) ())

525 
__THROW
 
	`__asm
 ("©_quick_exô"Ë
	`__n⁄nuŒ
 ((1));

527 
	$©_quick_exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

530 
__END_NAMESPACE_STD


532 #ifdef 
__USE_MISC


535 
	$⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

536 
__THROW
 
	`__n⁄nuŒ
 ((1));

539 
__BEGIN_NAMESPACE_STD


543 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

545 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


549 
	$quick_exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

551 
__END_NAMESPACE_STD


553 #ifde‡
__USE_ISOC99


554 
__BEGIN_NAMESPACE_C99


557 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

558 
__END_NAMESPACE_C99


562 
__BEGIN_NAMESPACE_STD


564 *
	$gëív
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

565 
__END_NAMESPACE_STD


567 #ifde‡
__USE_GNU


570 *
	$£cuª_gëív
 (c⁄° *
__«me
)

571 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

574 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


578 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

581 #ifde‡
__USE_XOPEN2K


584 
	$£ãnv
 (c⁄° *
__«me
, c⁄° *
__vÆue
, 
__ª∂a˚
)

585 
__THROW
 
	`__n⁄nuŒ
 ((2));

588 
	$un£ãnv
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

591 #ifdef 
__USE_MISC


595 
	$˛óªnv
 (Ë
__THROW
;

599 #i‡
deföed
 
__USE_MISC
 \

600 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
)

606 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

609 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


618 #i‚de‡
__USE_FILE_OFFSET64


619 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

621 #ifde‡
__REDIRECT


622 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

623 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

625 
	#mk°emp
 
mk°emp64


	)

628 #ifde‡
__USE_LARGEFILE64


629 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

633 #ifde‡
__USE_MISC


640 #i‚de‡
__USE_FILE_OFFSET64


641 
	$mk°emps
 (*
__ãm∂©e
, 
__suffixÀn
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

643 #ifde‡
__REDIRECT


644 
	`__REDIRECT
 (
mk°emps
, (*
__ãm∂©e
, 
__suffixÀn
),

645 
mk°emps64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

647 
	#mk°emps
 
mk°emps64


	)

650 #ifde‡
__USE_LARGEFILE64


651 
	$mk°emps64
 (*
__ãm∂©e
, 
__suffixÀn
)

652 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

656 #ifde‡
__USE_XOPEN2K8


662 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

665 #ifde‡
__USE_GNU


672 #i‚de‡
__USE_FILE_OFFSET64


673 
	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

675 #ifde‡
__REDIRECT


676 
	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
), 
mko°emp64
)

677 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

679 
	#mko°emp
 
mko°emp64


	)

682 #ifde‡
__USE_LARGEFILE64


683 
	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

692 #i‚de‡
__USE_FILE_OFFSET64


693 
	$mko°emps
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

694 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

696 #ifde‡
__REDIRECT


697 
	`__REDIRECT
 (
mko°emps
, (*
__ãm∂©e
, 
__suffixÀn
,

698 
__Êags
), 
mko°emps64
)

699 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

701 
	#mko°emps
 
mko°emps64


	)

704 #ifde‡
__USE_LARGEFILE64


705 
	$mko°emps64
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

706 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

711 
__BEGIN_NAMESPACE_STD


716 
	$sy°em
 (c⁄° *
__comm™d
Ë
__wur
;

717 
__END_NAMESPACE_STD


720 #ifdef 
__USE_GNU


723 *
	$ˇn⁄iˇlize_fûe_«me
 (c⁄° *
__«me
)

724 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

727 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


733 *
	$ªÆ∑th
 (c⁄° *
__ª°ri˘
 
__«me
,

734 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

739 #i‚de‡
__COMPAR_FN_T


740 
	#__COMPAR_FN_T


	)

741 (*
	t__com∑r_‚_t
) (const *, const *);

743 #ifdef 
__USE_GNU


744 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

747 #ifde‡
__USE_GNU


748 (*
	t__com∑r_d_‚_t
) (const *, const *, *);

751 
__BEGIN_NAMESPACE_STD


754 *
	$b£¨ch
 (c⁄° *
__key
, c⁄° *
__ba£
,

755 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

756 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

758 #ifde‡
__USE_EXTERN_INLINES


759 
	~<bôs/°dlib-b£¨ch.h
>

764 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

765 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

766 #ifde‡
__USE_GNU


767 
	$qs‹t_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

768 
__com∑r_d_‚_t
 
__com∑r
, *
__¨g
)

769 
	`__n⁄nuŒ
 ((1, 4));

774 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

775 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

776 
__END_NAMESPACE_STD


778 #ifde‡
__USE_ISOC99


779 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

780 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

784 
__BEGIN_NAMESPACE_STD


788 
div_t
 
	$div
 (
__numî
, 
__díom
)

789 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

790 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

791 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

792 
__END_NAMESPACE_STD


794 #ifde‡
__USE_ISOC99


795 
__BEGIN_NAMESPACE_C99


796 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

797 
__díom
)

798 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

799 
__END_NAMESPACE_C99


803 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

804 || 
deföed
 
__USE_MISC


811 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

812 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

817 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

818 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

823 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

824 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

827 #ifde‡
__USE_MISC


829 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

830 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

831 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

832 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

833 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

834 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

835 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

836 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

841 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

842 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

843 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

844 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

845 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

846 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

848 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

849 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

850 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

851 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

852 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

853 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

854 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

855 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

859 
__BEGIN_NAMESPACE_STD


862 
	$mbÀn
 (c⁄° *
__s
, 
size_t
 
__n
Ë
__THROW
;

865 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

866 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

869 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
;

873 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

874 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

876 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

877 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

878 
__THROW
;

879 
__END_NAMESPACE_STD


882 #ifde‡
__USE_MISC


887 
	$Ωm©ch
 (c⁄° *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

891 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


898 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

899 *c⁄° *
__ª°ri˘
 
__tokís
,

900 **
__ª°ri˘
 
__vÆuï
)

901 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

905 #ifde‡
__USE_XOPEN


907 
	$£tkey
 (c⁄° *
__key
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

913 #ifde‡
__USE_XOPEN2KXSI


915 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

918 #ifde‡
__USE_XOPEN


923 
	$gø¡±
 (
__fd
Ë
__THROW
;

927 
	$u∆ock±
 (
__fd
Ë
__THROW
;

932 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

935 #ifde‡
__USE_GNU


939 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

940 
__THROW
 
	`__n⁄nuŒ
 ((2));

943 
	`gë±
 ();

946 #ifde‡
__USE_MISC


950 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

951 
__THROW
 
	`__n⁄nuŒ
 ((1));

954 
	~<bôs/°dlib-Êﬂt.h
>

957 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


958 
	~<bôs/°dlib.h
>

960 #ifde‡
__LDBL_COMPAT


961 
	~<bôs/°dlib-ldbl.h
>

965 #unde‡
__√ed_mÆloc_™d_ˇŒoc


967 
__END_DECLS


	@/usr/include/alloca.h

18 #i‚def 
_ALLOCA_H


19 
	#_ALLOCA_H
 1

	)

21 
	~<„©uªs.h
>

23 
	#__√ed_size_t


	)

24 
	~<°ddef.h
>

26 
	g__BEGIN_DECLS


29 #unde‡
Æloˇ


32 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

34 #ifdef 
__GNUC__


35 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

38 
__END_DECLS


	@/usr/include/bits/stdlib-bsearch.h

19 
__exã∫_ölöe
 *

20 
	$b£¨ch
 (c⁄° *
__key
, c⁄° *
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

21 
__com∑r_‚_t
 
__com∑r
)

23 
size_t
 
__l
, 
__u
, 
__idx
;

24 c⁄° *
__p
;

25 
__com∑ris⁄
;

27 
__l
 = 0;

28 
__u
 = 
__nmemb
;

29 
__l
 < 
__u
)

31 
__idx
 = (
__l
 + 
__u
) / 2;

32 
__p
 = (*Ë(((c⁄° *Ë
__ba£
Ë+ (
__idx
 * 
__size
));

33 
__com∑ris⁄
 = (*
__com∑r
Ë(
__key
, 
__p
);

34 i‡(
__com∑ris⁄
 < 0)

35 
__u
 = 
__idx
;

36 i‡(
__com∑ris⁄
 > 0)

37 
__l
 = 
__idx
 + 1;

39  (*Ë
__p
;

42  
NULL
;

43 
	}
}

	@/usr/include/bits/stdlib-float.h

19 #i‚de‡
_STDLIB_H


23 #ifde‡
__USE_EXTERN_INLINES


24 
__BEGIN_NAMESPACE_STD


25 
__exã∫_ölöe
 

26 
__NTH
 (
	$©of
 (c⁄° *
__≈å
))

28  
	`°πod
 (
__≈å
, (**Ë
NULL
);

29 
	}
}

30 
	g__END_NAMESPACE_STD


	@/usr/include/bits/stdlib-ldbl.h

19 #i‚de‡
_STDLIB_H


23 #ifdef 
__USE_ISOC99


24 
__BEGIN_NAMESPACE_C99


25 
	$__LDBL_REDIR1_DECL
 (
°πﬁd
, 
°πod
)

26 
__END_NAMESPACE_C99


29 #ifde‡
__USE_GNU


30 
	$__LDBL_REDIR1_DECL
 (
°πﬁd_l
, 
°πod_l
)

33 #ifde‡
__USE_MISC


34 
	$__LDBL_REDIR1_DECL
 (
qecvt
, 
ecvt
)

35 
	$__LDBL_REDIR1_DECL
 (
qfcvt
, 
fcvt
)

36 
	$__LDBL_REDIR1_DECL
 (
qgcvt
, 
gcvt
)

37 
	$__LDBL_REDIR1_DECL
 (
qecvt_r
, 
ecvt_r
)

38 
	$__LDBL_REDIR1_DECL
 (
qfcvt_r
, 
fcvt_r
)

	@/usr/include/bits/stdlib.h

19 #i‚de‡
_STDLIB_H


23 *
	$__ªÆ∑th_chk
 (c⁄° *
__ª°ri˘
 
__«me
,

24 *
__ª°ri˘
 
__ªsﬁved
,

25 
size_t
 
__ªsﬁvedÀn
Ë
__THROW
 
__wur
;

26 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_Æüs
,

27 (c⁄° *
__ª°ri˘
 
__«me
,

28 *
__ª°ri˘
 
__ªsﬁved
), 
ªÆ∑th
Ë
__wur
;

29 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_chk_w¨n
,

30 (c⁄° *
__ª°ri˘
 
__«me
,

31 *
__ª°ri˘
 
__ªsﬁved
,

32 
size_t
 
__ªsﬁvedÀn
), 
__ªÆ∑th_chk
Ë
__wur


33 
	`__w¨«âr
 ("secondárgument ofÑealpath must beÉither NULL orát "

36 
__f‹tify_fun˘i⁄
 
__wur
 *

37 
	`__NTH
 (
	$ªÆ∑th
 (c⁄° *
__ª°ri˘
 
__«me
, *__ª°ri˘ 
__ªsﬁved
))

39 i‡(
	`__bos
 (
__ªsﬁved
Ë!(
size_t
) -1)

41 #i‡
deföed
 
_LIBC_LIMITS_H_
 && deföed 
PATH_MAX


42 i‡(
	`__bos
 (
__ªsﬁved
Ë< 
PATH_MAX
)

43  
	`__ªÆ∑th_chk_w¨n
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

45  
	`__ªÆ∑th_chk
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

48  
	`__ªÆ∑th_Æüs
 (
__«me
, 
__ªsﬁved
);

49 
	}
}

52 
	$__±¢ame_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

53 
size_t
 
__ƒól
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

54 
	`__REDIRECT_NTH
 (
__±¢ame_r_Æüs
, (
__fd
, *
__buf
,

55 
size_t
 
__buÊí
), 
±¢ame_r
)

56 
	`__n⁄nuŒ
 ((2));

57 
	`__REDIRECT_NTH
 (
__±¢ame_r_chk_w¨n
,

58 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

59 
size_t
 
__ƒól
), 
__±¢ame_r_chk
)

60 
	`__n⁄nuŒ
 ((2)Ë
	`__w¨«âr
 ("ptsname_r called with buflen biggerÅhan "

63 
__f‹tify_fun˘i⁄
 

64 
	`__NTH
 (
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
))

66 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

68 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

69  
	`__±¢ame_r_chk
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

70 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

71  
	`__±¢ame_r_chk_w¨n
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

73  
	`__±¢ame_r_Æüs
 (
__fd
, 
__buf
, 
__buÊí
);

74 
	}
}

77 
	$__w˘omb_chk
 (*
__s
, 
wch¨_t
 
__wch¨
, 
size_t
 
__buÊí
)

78 
__THROW
 
__wur
;

79 
	`__REDIRECT_NTH
 (
__w˘omb_Æüs
, (*
__s
, 
wch¨_t
 
__wch¨
),

80 
w˘omb
Ë
__wur
;

82 
__f‹tify_fun˘i⁄
 
__wur
 

83 
	`__NTH
 (
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
))

88 
	#__STDLIB_MB_LEN_MAX
 16

	)

89 #i‡
deföed
 
MB_LEN_MAX
 && MB_LEN_MAX !
__STDLIB_MB_LEN_MAX


92 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 && 
__STDLIB_MB_LEN_MAX
 > __bos (__s))

93  
	`__w˘omb_chk
 (
__s
, 
__wch¨
, 
	`__bos
 (__s));

94  
	`__w˘omb_Æüs
 (
__s
, 
__wch¨
);

95 
	}
}

98 
size_t
 
	$__mb°owcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

99 c⁄° *
__ª°ri˘
 
__§c
,

100 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

101 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_Æüs
,

102 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

103 c⁄° *
__ª°ri˘
 
__§c
,

104 
size_t
 
__Àn
), 
mb°owcs
);

105 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_chk_w¨n
,

106 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

107 c⁄° *
__ª°ri˘
 
__§c
,

108 
size_t
 
__Àn
, size_à
__d°Àn
), 
__mb°owcs_chk
)

109 
	`__w¨«âr
 ("mbstowcs called with dst buffer smallerÅhanÜen "

112 
__f‹tify_fun˘i⁄
 
size_t


113 
	`__NTH
 (
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, c⁄° *__ª°ri˘ 
__§c
,

114 
size_t
 
__Àn
))

116 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

118 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

119  
	`__mb°owcs_chk
 (
__d°
, 
__§c
, 
__Àn
,

120 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

122 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

123  
	`__mb°owcs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
,

124 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

126  
	`__mb°owcs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

127 
	}
}

130 
size_t
 
	$__wc°ombs_chk
 (*
__ª°ri˘
 
__d°
,

131 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

132 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

133 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_Æüs
,

134 (*
__ª°ri˘
 
__d°
,

135 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

136 
size_t
 
__Àn
), 
wc°ombs
);

137 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_chk_w¨n
,

138 (*
__ª°ri˘
 
__d°
,

139 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

140 
size_t
 
__Àn
, size_à
__d°Àn
), 
__wc°ombs_chk
)

141 
	`__w¨«âr
 ("wcstombs called with dst buffer smallerÅhanÜen");

143 
__f‹tify_fun˘i⁄
 
size_t


144 
	`__NTH
 (
	$wc°ombs
 (*
__ª°ri˘
 
__d°
, c⁄° 
wch¨_t
 *__ª°ri˘ 
__§c
,

145 
size_t
 
__Àn
))

147 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

149 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

150  
	`__wc°ombs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

151 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

152  
	`__wc°ombs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

154  
	`__wc°ombs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

155 
	}
}

	@/usr/include/bits/waitflags.h

19 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


25 
	#WNOHANG
 1

	)

26 
	#WUNTRACED
 2

	)

29 
	#WSTOPPED
 2

	)

30 
	#WEXITED
 4

	)

31 
	#WCONTINUED
 8

	)

32 
	#WNOWAIT
 0x01000000

	)

34 
	#__WNOTHREAD
 0x20000000

	)

36 
	#__WALL
 0x40000000

	)

37 
	#__WCLONE
 0x80000000

	)

40 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


41 #i‚de‡
__ENUM_IDTYPE_T


42 
	#__ENUM_IDTYPE_T
 1

	)

46 #unde‡
P_ALL


47 #unde‡
P_PID


48 #unde‡
P_PGID


52 
	mP_ALL
,

53 
	mP_PID
,

54 
	mP_PGID


55 } 
	tidty≥_t
;

	@/usr/include/bits/waitstatus.h

19 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


28 
	#__WEXITSTATUS
(
°©us
Ë(((°©usË& 0xff00Ë>> 8)

	)

31 
	#__WTERMSIG
(
°©us
Ë((°©usË& 0x7f)

	)

34 
	#__WSTOPSIG
(
°©us
Ë
	`__WEXITSTATUS
(°©us)

	)

37 
	#__WIFEXITED
(
°©us
Ë(
	`__WTERMSIG
(°©usË=0)

	)

40 
	#__WIFSIGNALED
(
°©us
) \

41 (((sig√d Ë(((
°©us
Ë& 0x7fË+ 1Ë>> 1Ë> 0)

	)

44 
	#__WIFSTOPPED
(
°©us
Ë(((°©usË& 0xffË=0x7f)

	)

48 #ifde‡
WCONTINUED


49 
	#__WIFCONTINUED
(
°©us
Ë((°©usË=
__W_CONTINUED
)

	)

53 
	#__WCOREDUMP
(
°©us
Ë((°©usË& 
__WCOREFLAG
)

	)

56 
	#__W_EXITCODE
(
ªt
, 
sig
Ë(‘ëË<< 8 | (sig))

	)

57 
	#__W_STOPCODE
(
sig
Ë((sigË<< 8 | 0x7f)

	)

58 
	#__W_CONTINUED
 0xffff

	)

59 
	#__WCOREFLAG
 0x80

	)

62 #ifdef 
__USE_MISC


64 
	~<ídün.h
>

66 
	uwaô


68 
	mw_°©us
;

71 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


72 
	m__w_ãrmsig
:7;

73 
	m__w_c‹edump
:1;

74 
	m__w_ªtcode
:8;

77 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


79 
	m__w_ªtcode
:8;

80 
	m__w_c‹edump
:1;

81 
	m__w_ãrmsig
:7;

83 } 
	m__waô_ãrmö©ed
;

86 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


87 
	m__w_°›vÆ
:8;

88 
	m__w_°›sig
:8;

91 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


93 
	m__w_°›sig
:8;

94 
	m__w_°›vÆ
:8;

96 } 
	m__waô_°›≥d
;

99 
	#w_ãrmsig
 
__waô_ãrmö©ed
.
__w_ãrmsig


	)

100 
	#w_c‹edump
 
__waô_ãrmö©ed
.
__w_c‹edump


	)

101 
	#w_ªtcode
 
__waô_ãrmö©ed
.
__w_ªtcode


	)

102 
	#w_°›sig
 
__waô_°›≥d
.
__w_°›sig


	)

103 
	#w_°›vÆ
 
__waô_°›≥d
.
__w_°›vÆ


	)

	@/usr/include/gnu/stubs.h

6 #i‡!
deföed
 
__x86_64__


7 
	~<gnu/°ubs-32.h
>

9 #i‡
deföed
 
__x86_64__
 && deföed 
__LP64__


10 
	~<gnu/°ubs-64.h
>

12 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


13 
	~<gnu/°ubs-x32.h
>

	@/usr/include/stdc-predef.h

18 #i‚def 
_STDC_PREDEF_H


19 
	#_STDC_PREDEF_H
 1

	)

36 #ifde‡
__GCC_IEC_559


37 #i‡
__GCC_IEC_559
 > 0

38 
	#__STDC_IEC_559__
 1

	)

41 
	#__STDC_IEC_559__
 1

	)

44 #ifde‡
__GCC_IEC_559_COMPLEX


45 #i‡
__GCC_IEC_559_COMPLEX
 > 0

46 
	#__STDC_IEC_559_COMPLEX__
 1

	)

49 
	#__STDC_IEC_559_COMPLEX__
 1

	)

55 
	#__STDC_ISO_10646__
 201505L

	)

58 
	#__STDC_NO_THREADS__
 1

	)

	@/usr/include/sys/cdefs.h

18 #i‚def 
_SYS_CDEFS_H


19 
	#_SYS_CDEFS_H
 1

	)

22 #i‚de‡
_FEATURES_H


23 
	~<„©uªs.h
>

29 #i‡
deföed
 
__GNUC__
 && !deföed 
__STDC__


34 #unde‡
__P


35 #unde‡
__PMT


37 #ifde‡
__GNUC__


41 #i‡
__GNUC_PREREQ
 (4, 6Ë&& !
deföed
 
_LIBC


42 
	#__LEAF
 , 
__Àaf__


	)

43 
	#__LEAF_ATTR
 
	`__©åibuã__
 ((
__Àaf__
))

	)

45 
	#__LEAF


	)

46 
	#__LEAF_ATTR


	)

54 #i‡!
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (3, 3)

55 
	#__THROW
 
	`__©åibuã__
 ((
__nŸhrow__
 
__LEAF
))

	)

56 
	#__THROWNL
 
	`__©åibuã__
 ((
__nŸhrow__
))

	)

57 
	#__NTH
(
f˘
Ë
	`__©åibuã__
 ((
__nŸhrow__
 
__LEAF
)Ë
	)
fct

59 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

60 
	#__THROW
 
	`throw
 ()

	)

61 
	#__THROWNL
 
	`throw
 ()

	)

62 
	#__NTH
(
f˘
Ë
__LEAF_ATTR
 f˘ 
	`throw
 ()

	)

64 
	#__THROW


	)

65 
	#__THROWNL


	)

66 
	#__NTH
(
f˘
Ë
	)
fct

72 
	#__ölöe


	)

74 
	#__THROW


	)

75 
	#__THROWNL


	)

76 
	#__NTH
(
f˘
Ë
	)
fct

82 
	#__P
(
¨gs
Ë
	)
args

83 
	#__PMT
(
¨gs
Ë
	)
args

88 
	#__CONCAT
(
x
,
y
Ëx ## 
	)
y

89 
	#__STRING
(
x
Ë#x

	)

92 
	#__±r_t
 *

	)

93 
	#__l⁄g_doubÀ_t
 

	)

97 #ifdef 
__˝lu•lus


98 
	#__BEGIN_DECLS
 "C" {

	)

99 
	#__END_DECLS
 }

	)

101 
	#__BEGIN_DECLS


	)

102 
	#__END_DECLS


	)

111 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES


112 
	#__BEGIN_NAMESPACE_STD
 
«me•a˚
 
°d
 {

	)

113 
	#__END_NAMESPACE_STD
 }

	)

114 
	#__USING_NAMESPACE_STD
(
«me
Ë
usög
 
°d
::«me;

	)

115 
	#__BEGIN_NAMESPACE_C99
 
«me•a˚
 
__c99
 {

	)

116 
	#__END_NAMESPACE_C99
 }

	)

117 
	#__USING_NAMESPACE_C99
(
«me
Ë
usög
 
__c99
::«me;

	)

122 
	#__BEGIN_NAMESPACE_STD


	)

123 
	#__END_NAMESPACE_STD


	)

124 
	#__USING_NAMESPACE_STD
(
«me
)

	)

125 
	#__BEGIN_NAMESPACE_C99


	)

126 
	#__END_NAMESPACE_C99


	)

127 
	#__USING_NAMESPACE_C99
(
«me
)

	)

132 
	#__bos
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 
__USE_FORTIFY_LEVEL
 > 1)

	)

133 
	#__bos0
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 0)

	)

135 #i‡
__GNUC_PREREQ
 (4,3)

136 
	#__w¨nde˛
(
«me
, 
msg
) \

137 
	`«me
 (Ë
	`__©åibuã__
((
	`__w¨nög__
 (
msg
)))

	)

138 
	#__w¨«âr
(
msg
Ë
	`__©åibuã__
((
	`__w¨nög__
 (msg)))

	)

139 
	#__îr‹de˛
(
«me
, 
msg
) \

140 
	`«me
 (Ë
	`__©åibuã__
((
	`__îr‹__
 (
msg
)))

	)

142 
	#__w¨nde˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

143 
	#__w¨«âr
(
msg
)

	)

144 
	#__îr‹de˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

148 #i‡
__GNUC_PREREQ
 (2,97)

150 
	#__Êex¨r
 []

	)

152 #ifde‡
__GNUC__


153 
	#__Êex¨r
 [0]

	)

155 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

156 
	#__Êex¨r
 []

	)

159 
	#__Êex¨r
 [1]

	)

175 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

177 
	#__REDIRECT
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

178 #ifde‡
__˝lu•lus


179 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

180 
«me
 
¥Ÿo
 
__THROW
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

181 
	#__REDIRECT_NTHNL
(
«me
, 
¥Ÿo
, 
Æüs
) \

182 
«me
 
¥Ÿo
 
__THROWNL
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

184 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

185 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROW


	)

186 
	#__REDIRECT_NTHNL
(
«me
, 
¥Ÿo
, 
Æüs
) \

187 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROWNL


	)

189 
	#__ASMNAME
(
˙ame
Ë
	`__ASMNAME2
 (
__USER_LABEL_PREFIX__
, c«me)

	)

190 
	#__ASMNAME2
(
¥efix
, 
˙ame
Ë
	`__STRING
 (¥efixË
	)
cname

203 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

204 
	#__©åibuã__
(
xyz
Ë

	)

210 #i‡
__GNUC_PREREQ
 (2,96)

211 
	#__©åibuã_mÆloc__
 
	`__©åibuã__
 ((
__mÆloc__
))

	)

213 
	#__©åibuã_mÆloc__


	)

218 #i‡
__GNUC_PREREQ
 (4, 3)

219 
	#__©åibuã_Æloc_size__
(
∑øms
) \

220 
	`__©åibuã__
 ((
__Æloc_size__
 
∑øms
))

	)

222 
	#__©åibuã_Æloc_size__
(
∑øms
Ë

	)

228 #i‡
__GNUC_PREREQ
 (2,96)

229 
	#__©åibuã_puª__
 
	`__©åibuã__
 ((
__puª__
))

	)

231 
	#__©åibuã_puª__


	)

235 #i‡
__GNUC_PREREQ
 (2,5)

236 
	#__©åibuã_c⁄°__
 
	`__©åibuã__
 ((
__c⁄°__
))

	)

238 
	#__©åibuã_c⁄°__


	)

244 #i‡
__GNUC_PREREQ
 (3,1)

245 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__u£d__
))

	)

246 
	#__©åibuã_noölöe__
 
	`__©åibuã__
 ((
__noölöe__
))

	)

248 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__unu£d__
))

	)

249 
	#__©åibuã_noölöe__


	)

253 #i‡
__GNUC_PREREQ
 (3,2)

254 
	#__©åibuã_dïªˇãd__
 
	`__©åibuã__
 ((
__dïªˇãd__
))

	)

256 
	#__©åibuã_dïªˇãd__


	)

265 #i‡
__GNUC_PREREQ
 (2,8)

266 
	#__©åibuã_f‹m©_¨g__
(
x
Ë
	`__©åibuã__
 ((
	`__f‹m©_¨g__
 (x)))

	)

268 
	#__©åibuã_f‹m©_¨g__
(
x
Ë

	)

275 #i‡
__GNUC_PREREQ
 (2,97)

276 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
) \

277 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__°rfm⁄__
, 
a
, 
b
)))

	)

279 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
Ë

	)

284 #i‡
__GNUC_PREREQ
 (3,3)

285 
	#__n⁄nuŒ
(
∑øms
Ë
	`__©åibuã__
 ((
__n⁄nuŒ__
Ö¨ams))

	)

287 
	#__n⁄nuŒ
(
∑øms
)

	)

292 #i‡
__GNUC_PREREQ
 (3,4)

293 
	#__©åibuã_w¨n_unu£d_ªsu…__
 \

294 
	`__©åibuã__
 ((
__w¨n_unu£d_ªsu…__
))

	)

295 #i‡
__USE_FORTIFY_LEVEL
 > 0

296 
	#__wur
 
__©åibuã_w¨n_unu£d_ªsu…__


	)

299 
	#__©åibuã_w¨n_unu£d_ªsu…__


	)

301 #i‚de‡
__wur


302 
	#__wur


	)

306 #i‡
__GNUC_PREREQ
 (3,2)

307 
	#__Æways_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__Æways_ölöe__
))

	)

309 
	#__Æways_ölöe
 
__ölöe


	)

314 #i‡
__GNUC_PREREQ
 (4,3)

315 
	#__©åibuã_¨tificül__
 
	`__©åibuã__
 ((
__¨tificül__
))

	)

317 
	#__©åibuã_¨tificül__


	)

329 #i‡(!
deföed
 
__˝lu•lus
 || 
__GNUC_PREREQ
 (4,3) \

330 || (
deföed
 
__˛™g__
 && (deföed 
__GNUC_STDC_INLINE__
 \

331 || 
deföed
 
__GNUC_GNU_INLINE__
)))

332 #i‡
deföed
 
__GNUC_STDC_INLINE__
 || deföed 
__˝lu•lus


333 
	#__exã∫_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

334 
	#__exã∫_Æways_ölöe
 \

335 
__Æways_ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

337 
	#__exã∫_ölöe
 
__ölöe


	)

338 
	#__exã∫_Æways_ölöe
 
__Æways_ölöe


	)

342 #ifde‡
__exã∫_Æways_ölöe


343 
	#__f‹tify_fun˘i⁄
 
__exã∫_Æways_ölöe
 
__©åibuã_¨tificül__


	)

348 #i‡
__GNUC_PREREQ
 (4,3)

349 
	#__va_¨g_∑ck
(Ë
	`__buûtö_va_¨g_∑ck
 ()

	)

350 
	#__va_¨g_∑ck_Àn
(Ë
	`__buûtö_va_¨g_∑ck_Àn
 ()

	)

357 #i‡!
__GNUC_PREREQ
 (2,8)

358 
	#__exãnsi⁄__


	)

362 #i‡!
__GNUC_PREREQ
 (2,92)

363 
	#__ª°ri˘


	)

369 #i‡
__GNUC_PREREQ
 (3,1Ë&& !
deföed
 
__GNUG__


370 
	#__ª°ri˘_¨r
 
__ª°ri˘


	)

372 #ifde‡
__GNUC__


373 
	#__ª°ri˘_¨r


	)

375 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

376 
	#__ª°ri˘_¨r
 
ª°ri˘


	)

379 
	#__ª°ri˘_¨r


	)

384 #i‡
__GNUC__
 >= 3

385 
	#__glibc_u∆ikñy
(
c⁄d
Ë
	`__buûtö_ex≥˘
 ((c⁄d), 0)

	)

386 
	#__glibc_likñy
(
c⁄d
Ë
	`__buûtö_ex≥˘
 ((c⁄d), 1)

	)

388 
	#__glibc_u∆ikñy
(
c⁄d
Ë(c⁄d)

	)

389 
	#__glibc_likñy
(
c⁄d
Ë(c⁄d)

	)

392 #i‡(!
deföed
 
_N‹ëu∫
 \

393 && (
deföed
 
__STDC_VERSION__
 ? __STDC_VERSION__ : 0) < 201112 \

394 && !
	$__GNUC_PREREQ
 (4,7))

395 #i‡
	`__GNUC_PREREQ
 (2,8)

396 
	#_N‹ëu∫
 
	`__©åibuã__
 ((
__n‹ëu∫__
))

	)

398 
	#_N‹ëu∫


	)

402 #i‡(!
deföed
 
_Sètic_as£π
 && !deföed 
__˝lu•lus
 \

403 && (
deföed
 
__STDC_VERSION__
 ? __STDC_VERSION__ : 0) < 201112 \

404 && (!
	`__GNUC_PREREQ
 (4, 6Ë|| 
deföed
 
__STRICT_ANSI__
))

405 
	#_Sètic_as£π
(
ex¥
, 
dügno°ic
) \

406 (*
	`__Sètic_as£π_fun˘i⁄
 ()) \

407 [!! (°ru˘ { 
__îr‹_if_√g©ive
: (
ex¥
Ë? 2 : -1; })]

	)

410 
	~<bôs/w‹dsize.h
>

412 #i‡
deföed
 
__LONG_DOUBLE_MATH_OPTIONAL
 && deföed 
__NO_LONG_DOUBLE_MATH


413 
	#__LDBL_COMPAT
 1

	)

414 #ifde‡
__REDIRECT


415 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

416 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
) \

417 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

418 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT_NTH
 («me,ÖrŸo,álüs)

	)

419 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
) \

420 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

421 
	#__LDBL_REDIR1_DECL
(
«me
, 
Æüs
) \

422 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 (#Æüs));

	)

423 
	#__LDBL_REDIR_DECL
(
«me
) \

424 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 ("__∆dbl_" #«me));

	)

425 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

426 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

427 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

428 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

431 #i‡!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT


432 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê
	)
proto

433 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
Ë«mê
	)
proto

434 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
__THROW


	)

435 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
Ë«mê¥Ÿÿ
__THROW


	)

436 
	#__LDBL_REDIR_DECL
(
«me
)

	)

437 #ifde‡
__REDIRECT


438 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

439 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

440 
	`__REDIRECT_NTH
 (
«me
, 
¥Ÿo
, 
Æüs
)

	)

	@/usr/include/sys/types.h

22 #i‚def 
_SYS_TYPES_H


23 
	#_SYS_TYPES_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<bôs/ty≥s.h
>

31 #ifdef 
__USE_MISC


32 #i‚de‡
__u_ch¨_deföed


33 
__u_ch¨
 
	tu_ch¨
;

34 
__u_sh‹t
 
	tu_sh‹t
;

35 
__u_öt
 
	tu_öt
;

36 
__u_l⁄g
 
	tu_l⁄g
;

37 
__quad_t
 
	tquad_t
;

38 
__u_quad_t
 
	tu_quad_t
;

39 
__fsid_t
 
	tfsid_t
;

40 
	#__u_ch¨_deföed


	)

44 
__loff_t
 
	tloff_t
;

46 #i‚de‡
__öo_t_deföed


47 #i‚de‡
__USE_FILE_OFFSET64


48 
__öo_t
 
	töo_t
;

50 
__öo64_t
 
	töo_t
;

52 
	#__öo_t_deföed


	)

54 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__öo64_t_deföed


55 
__öo64_t
 
	töo64_t
;

56 
	#__öo64_t_deföed


	)

59 #i‚de‡
__dev_t_deföed


60 
__dev_t
 
	tdev_t
;

61 
	#__dev_t_deföed


	)

64 #i‚de‡
__gid_t_deföed


65 
__gid_t
 
	tgid_t
;

66 
	#__gid_t_deföed


	)

69 #i‚de‡
__mode_t_deföed


70 
__mode_t
 
	tmode_t
;

71 
	#__mode_t_deföed


	)

74 #i‚de‡
__∆ök_t_deföed


75 
__∆ök_t
 
	t∆ök_t
;

76 
	#__∆ök_t_deföed


	)

79 #i‚de‡
__uid_t_deföed


80 
__uid_t
 
	tuid_t
;

81 
	#__uid_t_deföed


	)

84 #i‚de‡
__off_t_deföed


85 #i‚de‡
__USE_FILE_OFFSET64


86 
__off_t
 
	toff_t
;

88 
__off64_t
 
	toff_t
;

90 
	#__off_t_deföed


	)

92 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


93 
__off64_t
 
	toff64_t
;

94 
	#__off64_t_deföed


	)

97 #i‚de‡
__pid_t_deföed


98 
__pid_t
 
	tpid_t
;

99 
	#__pid_t_deföed


	)

102 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
) \

103 && !
deföed
 
__id_t_deföed


104 
__id_t
 
	tid_t
;

105 
	#__id_t_deföed


	)

108 #i‚de‡
__ssize_t_deföed


109 
__ssize_t
 
	tssize_t
;

110 
	#__ssize_t_deföed


	)

113 #ifdef 
__USE_MISC


114 #i‚de‡
__daddr_t_deföed


115 
__daddr_t
 
	tdaddr_t
;

116 
__ˇddr_t
 
	tˇddr_t
;

117 
	#__daddr_t_deföed


	)

121 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN
Ë&& !deföed 
__key_t_deföed


122 
__key_t
 
	tkey_t
;

123 
	#__key_t_deföed


	)

126 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


127 
	#__√ed_˛ock_t


	)

129 
	#__√ed_time_t


	)

130 
	#__√ed_timî_t


	)

131 
	#__√ed_˛ockid_t


	)

132 
	~<time.h
>

134 #ifde‡
__USE_XOPEN


135 #i‚de‡
__u£c⁄ds_t_deföed


136 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

137 
	#__u£c⁄ds_t_deföed


	)

139 #i‚de‡
__su£c⁄ds_t_deföed


140 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

141 
	#__su£c⁄ds_t_deföed


	)

145 
	#__√ed_size_t


	)

146 
	~<°ddef.h
>

148 #ifde‡
__USE_MISC


150 
	tul⁄g
;

151 
	tush‹t
;

152 
	tuöt
;

157 #i‡!
__GNUC_PREREQ
 (2, 7)

160 #i‚de‡
__öt8_t_deföed


161 
	#__öt8_t_deföed


	)

162 
	töt8_t
;

163 
	töt16_t
;

164 
	töt32_t
;

165 #i‡
__WORDSIZE
 == 64

166 
	töt64_t
;

168 
__exãnsi⁄__
 
	töt64_t
;

173 
	tu_öt8_t
;

174 
	tu_öt16_t
;

175 
	tu_öt32_t
;

176 #i‡
__WORDSIZE
 == 64

177 
	tu_öt64_t
;

179 
__exãnsi⁄__
 
	tu_öt64_t
;

182 
	tªgi°î_t
;

187 
	#__ötN_t
(
N
, 
MODE
) \

188 ##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

189 
	t__u_ötN_t
(
	tN
, 
	tMODE
) \

190 
	tu_öt
##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

192 #i‚de‡
	t__öt8_t_deföed


193 
	t__öt8_t_deföed


	)

194 
	t__ötN_t
 (8, 
	t__QI__
);

195 
__ötN_t
 (16, 
__HI__
);

196 
__ötN_t
 (32, 
__SI__
);

197 
__ötN_t
 (64, 
__DI__
);

200 
__u_ötN_t
 (8, 
__QI__
);

201 
__u_ötN_t
 (16, 
__HI__
);

202 
__u_ötN_t
 (32, 
__SI__
);

203 
__u_ötN_t
 (64, 
__DI__
);

205 
	tªgi°î_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__w‹d__
)));

211 
	#__BIT_TYPES_DEFINED__
 1

	)

214 #ifdef 
__USE_MISC


216 
	~<ídün.h
>

219 
	~<sys/£À˘.h
>

222 
	~<sys/sysma¸os.h
>

226 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
) \

227 && !
deföed
 
__blksize_t_deföed


228 
__blksize_t
 
	tblksize_t
;

229 
	#__blksize_t_deföed


	)

233 #i‚de‡
__USE_FILE_OFFSET64


234 #i‚de‡
__blk˙t_t_deföed


235 
__blk˙t_t
 
	tblk˙t_t
;

236 
	#__blk˙t_t_deföed


	)

238 #i‚de‡
__fsblk˙t_t_deföed


239 
__fsblk˙t_t
 
	tfsblk˙t_t
;

240 
	#__fsblk˙t_t_deföed


	)

242 #i‚de‡
__fsfû˙t_t_deföed


243 
__fsfû˙t_t
 
	tfsfû˙t_t
;

244 
	#__fsfû˙t_t_deföed


	)

247 #i‚de‡
__blk˙t_t_deföed


248 
__blk˙t64_t
 
	tblk˙t_t
;

249 
	#__blk˙t_t_deföed


	)

251 #i‚de‡
__fsblk˙t_t_deföed


252 
__fsblk˙t64_t
 
	tfsblk˙t_t
;

253 
	#__fsblk˙t_t_deföed


	)

255 #i‚de‡
__fsfû˙t_t_deföed


256 
__fsfû˙t64_t
 
	tfsfû˙t_t
;

257 
	#__fsfû˙t_t_deföed


	)

261 #ifde‡
__USE_LARGEFILE64


262 
__blk˙t64_t
 
	tblk˙t64_t
;

263 
__fsblk˙t64_t
 
	tfsblk˙t64_t
;

264 
__fsfû˙t64_t
 
	tfsfû˙t64_t
;

269 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


270 
	~<bôs/±hªadty≥s.h
>

273 
	g__END_DECLS


	@/usr/include/xlocale.h

20 #i‚de‡
_XLOCALE_H


21 
	#_XLOCALE_H
 1

	)

27 
	s__loˇÀ_°ru˘


30 
__loˇÀ_d©a
 *
	m__loˇÀs
[13];

33 c⁄° *
	m__˘y≥_b
;

34 c⁄° *
	m__˘y≥_tﬁowî
;

35 c⁄° *
	m__˘y≥_touµî
;

38 c⁄° *
	m__«mes
[13];

39 } *
	t__loˇÀ_t
;

42 
__loˇÀ_t
 
	tloˇÀ_t
;

	@/usr/include/bits/pthreadtypes.h

18 #i‚de‡
_BITS_PTHREADTYPES_H


19 
	#_BITS_PTHREADTYPES_H
 1

	)

21 
	~<bôs/w‹dsize.h
>

23 #ifde‡
__x86_64__


24 #i‡
__WORDSIZE
 == 64

25 
	#__SIZEOF_PTHREAD_ATTR_T
 56

	)

26 
	#__SIZEOF_PTHREAD_MUTEX_T
 40

	)

27 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

28 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

29 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

30 
	#__SIZEOF_PTHREAD_RWLOCK_T
 56

	)

31 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

32 
	#__SIZEOF_PTHREAD_BARRIER_T
 32

	)

33 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

35 
	#__SIZEOF_PTHREAD_ATTR_T
 32

	)

36 
	#__SIZEOF_PTHREAD_MUTEX_T
 32

	)

37 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

38 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

39 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

40 
	#__SIZEOF_PTHREAD_RWLOCK_T
 44

	)

41 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

42 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

43 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

46 
	#__SIZEOF_PTHREAD_ATTR_T
 36

	)

47 
	#__SIZEOF_PTHREAD_MUTEX_T
 24

	)

48 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

49 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

50 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

51 
	#__SIZEOF_PTHREAD_RWLOCK_T
 32

	)

52 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

53 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

54 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

60 
	t±hªad_t
;

63 
	u±hªad_©å_t


65 
	m__size
[
__SIZEOF_PTHREAD_ATTR_T
];

66 
	m__Æign
;

68 #i‚de‡
__have_±hªad_©å_t


69 
±hªad_©å_t
 
	t±hªad_©å_t
;

70 
	#__have_±hªad_©å_t
 1

	)

74 #ifde‡
__x86_64__


75 
	s__±hªad_öã∫Æ_li°


77 
__±hªad_öã∫Æ_li°
 *
	m__¥ev
;

78 
__±hªad_öã∫Æ_li°
 *
	m__√xt
;

79 } 
	t__±hªad_li°_t
;

81 
	s__±hªad_öã∫Æ_¶i°


83 
__±hªad_öã∫Æ_¶i°
 *
	m__√xt
;

84 } 
	t__±hªad_¶i°_t
;

92 
	s__±hªad_muãx_s


94 
	m__lock
;

95 
	m__cou¡
;

96 
	m__ow√r
;

97 #ifde‡
__x86_64__


98 
	m__nu£rs
;

102 
	m__köd
;

103 #ifde‡
__x86_64__


104 
	m__•ös
;

105 
	m__ñisi⁄
;

106 
__±hªad_li°_t
 
	m__li°
;

107 
	#__PTHREAD_MUTEX_HAVE_PREV
 1

	)

109 
	#__PTHREAD_SPINS
 0, 0

	)

111 
	m__nu£rs
;

112 
__exãnsi⁄__
 union

116 
	m__e•ös
;

117 
	m__ñisi⁄
;

118 
	#__•ös
 
__ñisi⁄_d©a
.
__e•ös


	)

119 
	#__ñisi⁄
 
__ñisi⁄_d©a
.
__ñisi⁄


	)

120 
	#__PTHREAD_SPINS
 { 0, 0 }

	)

121 } 
	m__ñisi⁄_d©a
;

122 
__±hªad_¶i°_t
 
	m__li°
;

125 } 
	m__d©a
;

126 
	m__size
[
__SIZEOF_PTHREAD_MUTEX_T
];

127 
	m__Æign
;

128 } 
	t±hªad_muãx_t
;

132 
	m__size
[
__SIZEOF_PTHREAD_MUTEXATTR_T
];

133 
	m__Æign
;

134 } 
	t±hªad_muãx©å_t
;

143 
	m__lock
;

144 
	m__fuãx
;

145 
__exãnsi⁄__
 
	m__tŸÆ_£q
;

146 
__exãnsi⁄__
 
	m__wakeup_£q
;

147 
__exãnsi⁄__
 
	m__wokí_£q
;

148 *
	m__muãx
;

149 
	m__nwaôîs
;

150 
	m__brﬂdˇ°_£q
;

151 } 
	m__d©a
;

152 
	m__size
[
__SIZEOF_PTHREAD_COND_T
];

153 
__exãnsi⁄__
 
	m__Æign
;

154 } 
	t±hªad_c⁄d_t
;

158 
	m__size
[
__SIZEOF_PTHREAD_CONDATTR_T
];

159 
	m__Æign
;

160 } 
	t±hªad_c⁄d©å_t
;

164 
	t±hªad_key_t
;

168 
	t±hªad_⁄˚_t
;

171 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


176 #ifde‡
__x86_64__


179 
	m__lock
;

180 
	m__ƒ_ªadîs
;

181 
	m__ªadîs_wakeup
;

182 
	m__wrôî_wakeup
;

183 
	m__ƒ_ªadîs_queued
;

184 
	m__ƒ_wrôîs_queued
;

185 
	m__wrôî
;

186 
	m__sh¨ed
;

187 sig√d 
	m__rwñisi⁄
;

188 #ifde‡ 
__ILP32__


189 
	m__∑d1
[3];

190 
	#__PTHREAD_RWLOCK_ELISION_EXTRA
 0, { 0, 0, 0 }

	)

192 
	m__∑d1
[7];

193 
	#__PTHREAD_RWLOCK_ELISION_EXTRA
 0, { 0, 0, 0, 0, 0, 0, 0 }

	)

195 
	m__∑d2
;

198 
	m__Êags
;

199 
	#__PTHREAD_RWLOCK_INT_FLAGS_SHARED
 1

	)

200 } 
	m__d©a
;

204 
	m__lock
;

205 
	m__ƒ_ªadîs
;

206 
	m__ªadîs_wakeup
;

207 
	m__wrôî_wakeup
;

208 
	m__ƒ_ªadîs_queued
;

209 
	m__ƒ_wrôîs_queued
;

212 
	m__Êags
;

213 
	m__sh¨ed
;

214 sig√d 
	m__rwñisi⁄
;

215 
	#__PTHREAD_RWLOCK_ELISION_EXTRA
 0

	)

216 
	m__∑d2
;

217 
	m__wrôî
;

218 } 
	m__d©a
;

220 
	m__size
[
__SIZEOF_PTHREAD_RWLOCK_T
];

221 
	m__Æign
;

222 } 
	t±hªad_rwlock_t
;

226 
	m__size
[
__SIZEOF_PTHREAD_RWLOCKATTR_T
];

227 
	m__Æign
;

228 } 
	t±hªad_rwlock©å_t
;

232 #ifde‡
__USE_XOPEN2K


234 vﬁ©ûê
	t±hªad_•ölock_t
;

241 
	m__size
[
__SIZEOF_PTHREAD_BARRIER_T
];

242 
	m__Æign
;

243 } 
	t±hªad_b¨rõr_t
;

247 
	m__size
[
__SIZEOF_PTHREAD_BARRIERATTR_T
];

248 
	m__Æign
;

249 } 
	t±hªad_b¨rõøâr_t
;

253 #i‚de‡
__x86_64__


255 
	#__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
	`__ªg∑rm__
 (1)))

	)

	@/usr/include/bits/types.h

23 #i‚def 
_BITS_TYPES_H


24 
	#_BITS_TYPES_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/w‹dsize.h
>

30 
	t__u_ch¨
;

31 
	t__u_sh‹t
;

32 
	t__u_öt
;

33 
	t__u_l⁄g
;

36 sig√d 
	t__öt8_t
;

37 
	t__uöt8_t
;

38 sig√d 
	t__öt16_t
;

39 
	t__uöt16_t
;

40 sig√d 
	t__öt32_t
;

41 
	t__uöt32_t
;

42 #i‡
__WORDSIZE
 == 64

43 sig√d 
	t__öt64_t
;

44 
	t__uöt64_t
;

46 
__exãnsi⁄__
 sig√d 
	t__öt64_t
;

47 
__exãnsi⁄__
 
	t__uöt64_t
;

51 #i‡
__WORDSIZE
 == 64

52 
	t__quad_t
;

53 
	t__u_quad_t
;

55 
__exãnsi⁄__
 
	t__quad_t
;

56 
__exãnsi⁄__
 
	t__u_quad_t
;

89 
	#__S16_TYPE
 

	)

90 
	#__U16_TYPE
 

	)

91 
	#__S32_TYPE
 

	)

92 
	#__U32_TYPE
 

	)

93 
	#__SLONGWORD_TYPE
 

	)

94 
	#__ULONGWORD_TYPE
 

	)

95 #i‡
__WORDSIZE
 == 32

96 
	#__SQUAD_TYPE
 
__quad_t


	)

97 
	#__UQUAD_TYPE
 
__u_quad_t


	)

98 
	#__SWORD_TYPE
 

	)

99 
	#__UWORD_TYPE
 

	)

100 
	#__SLONG32_TYPE
 

	)

101 
	#__ULONG32_TYPE
 

	)

102 
	#__S64_TYPE
 
__quad_t


	)

103 
	#__U64_TYPE
 
__u_quad_t


	)

106 
	#__STD_TYPE
 
__exãnsi⁄__
 

	)

107 #ñi‡
__WORDSIZE
 == 64

108 
	t__SQUAD_TYPE
 

	)

109 
	t__UQUAD_TYPE
 

	)

110 
	t__SWORD_TYPE
 

	)

111 
	t__UWORD_TYPE
 

	)

112 
	t__SLONG32_TYPE
 

	)

113 
	t__ULONG32_TYPE
 

	)

114 
	t__S64_TYPE
 

	)

115 
	t__U64_TYPE
 

	)

117 
	t__STD_TYPE
 

	)

121 
	~<bôs/ty≥sizes.h
>

124 
__STD_TYPE
 
	t__DEV_T_TYPE
 
	t__dev_t
;

125 
__STD_TYPE
 
__UID_T_TYPE
 
	g__uid_t
;

126 
__STD_TYPE
 
__GID_T_TYPE
 
	g__gid_t
;

127 
__STD_TYPE
 
__INO_T_TYPE
 
	g__öo_t
;

128 
__STD_TYPE
 
__INO64_T_TYPE
 
	g__öo64_t
;

129 
__STD_TYPE
 
__MODE_T_TYPE
 
	g__mode_t
;

130 
__STD_TYPE
 
__NLINK_T_TYPE
 
	g__∆ök_t
;

131 
__STD_TYPE
 
__OFF_T_TYPE
 
	g__off_t
;

132 
__STD_TYPE
 
__OFF64_T_TYPE
 
	g__off64_t
;

133 
__STD_TYPE
 
__PID_T_TYPE
 
	g__pid_t
;

134 
__STD_TYPE
 
__FSID_T_TYPE
 
	g__fsid_t
;

135 
__STD_TYPE
 
__CLOCK_T_TYPE
 
	g__˛ock_t
;

136 
__STD_TYPE
 
__RLIM_T_TYPE
 
	g__æim_t
;

137 
__STD_TYPE
 
__RLIM64_T_TYPE
 
	g__æim64_t
;

138 
__STD_TYPE
 
__ID_T_TYPE
 
	g__id_t
;

139 
__STD_TYPE
 
__TIME_T_TYPE
 
	g__time_t
;

140 
__STD_TYPE
 
__USECONDS_T_TYPE
 
	g__u£c⁄ds_t
;

141 
__STD_TYPE
 
__SUSECONDS_T_TYPE
 
	g__su£c⁄ds_t
;

143 
__STD_TYPE
 
__DADDR_T_TYPE
 
	g__daddr_t
;

144 
__STD_TYPE
 
__KEY_T_TYPE
 
	g__key_t
;

147 
__STD_TYPE
 
__CLOCKID_T_TYPE
 
	g__˛ockid_t
;

150 
__STD_TYPE
 
__TIMER_T_TYPE
 
	g__timî_t
;

153 
__STD_TYPE
 
__BLKSIZE_T_TYPE
 
	g__blksize_t
;

158 
__STD_TYPE
 
__BLKCNT_T_TYPE
 
	g__blk˙t_t
;

159 
__STD_TYPE
 
__BLKCNT64_T_TYPE
 
	g__blk˙t64_t
;

162 
__STD_TYPE
 
__FSBLKCNT_T_TYPE
 
	g__fsblk˙t_t
;

163 
__STD_TYPE
 
__FSBLKCNT64_T_TYPE
 
	g__fsblk˙t64_t
;

166 
__STD_TYPE
 
__FSFILCNT_T_TYPE
 
	g__fsfû˙t_t
;

167 
__STD_TYPE
 
__FSFILCNT64_T_TYPE
 
	g__fsfû˙t64_t
;

170 
__STD_TYPE
 
__FSWORD_T_TYPE
 
	g__fsw‹d_t
;

172 
__STD_TYPE
 
__SSIZE_T_TYPE
 
	g__ssize_t
;

175 
__STD_TYPE
 
__SYSCALL_SLONG_TYPE
 
	g__sysˇŒ_¶⁄g_t
;

177 
__STD_TYPE
 
__SYSCALL_ULONG_TYPE
 
	g__sysˇŒ_ul⁄g_t
;

181 
__off64_t
 
	t__loff_t
;

182 
__quad_t
 *
	t__qaddr_t
;

183 *
	t__ˇddr_t
;

186 
__STD_TYPE
 
__SWORD_TYPE
 
	g__öçå_t
;

189 
__STD_TYPE
 
__U32_TYPE
 
	g__sockÀn_t
;

192 #unde‡
__STD_TYPE


	@/usr/include/endian.h

18 #i‚def 
_ENDIAN_H


19 
	#_ENDIAN_H
 1

	)

21 
	~<„©uªs.h
>

31 
	#__LITTLE_ENDIAN
 1234

	)

32 
	#__BIG_ENDIAN
 4321

	)

33 
	#__PDP_ENDIAN
 3412

	)

36 
	~<bôs/ídün.h
>

40 #i‚de‡
__FLOAT_WORD_ORDER


41 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

44 #ifdef 
__USE_MISC


45 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

46 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

47 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

48 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

51 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


52 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

53 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


54 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

58 #i‡
deföed
 
__USE_MISC
 && !deföed 
__ASSEMBLER__


60 
	~<bôs/byãsw≠.h
>

62 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


63 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

64 
	#htﬁe16
(
x
Ë(x)

	)

65 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

66 
	#À16toh
(
x
Ë(x)

	)

68 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

69 
	#htﬁe32
(
x
Ë(x)

	)

70 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

71 
	#À32toh
(
x
Ë(x)

	)

73 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

74 
	#htﬁe64
(
x
Ë(x)

	)

75 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

76 
	#À64toh
(
x
Ë(x)

	)

79 
	#htobe16
(
x
Ë(x)

	)

80 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

81 
	#be16toh
(
x
Ë(x)

	)

82 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

84 
	#htobe32
(
x
Ë(x)

	)

85 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

86 
	#be32toh
(
x
Ë(x)

	)

87 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

89 
	#htobe64
(
x
Ë(x)

	)

90 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

91 
	#be64toh
(
x
Ë(x)

	)

92 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/gnu/stubs-32.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub_chÊags


	)

11 
	#__°ub_Áâach


	)

12 
	#__°ub_fchÊags


	)

13 
	#__°ub_fdëach


	)

14 
	#__°ub_gây


	)

15 
	#__°ub_lchmod


	)

16 
	#__°ub_ªvoke


	)

17 
	#__°ub_£éogö


	)

18 
	#__°ub_sigªtu∫


	)

19 
	#__°ub_s°k


	)

20 
	#__°ub_°ty


	)

	@/usr/include/gnu/stubs-64.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub___com∑t_bdÊush


	)

11 
	#__°ub_chÊags


	)

12 
	#__°ub_Áâach


	)

13 
	#__°ub_fchÊags


	)

14 
	#__°ub_fdëach


	)

15 
	#__°ub_gëmsg


	)

16 
	#__°ub_gây


	)

17 
	#__°ub_lchmod


	)

18 
	#__°ub_putmsg


	)

19 
	#__°ub_ªvoke


	)

20 
	#__°ub_£éogö


	)

21 
	#__°ub_sigªtu∫


	)

22 
	#__°ub_s°k


	)

23 
	#__°ub_°ty


	)

	@/usr/include/gnu/stubs-x32.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub___com∑t_bdÊush


	)

11 
	#__°ub___com∑t_¸óã_moduÀ


	)

12 
	#__°ub___com∑t_gë_kî√l_syms


	)

13 
	#__°ub___com∑t_quîy_moduÀ


	)

14 
	#__°ub___com∑t_u£lib


	)

15 
	#__°ub_chÊags


	)

16 
	#__°ub_Áâach


	)

17 
	#__°ub_fchÊags


	)

18 
	#__°ub_fdëach


	)

19 
	#__°ub_gëmsg


	)

20 
	#__°ub_gây


	)

21 
	#__°ub_lchmod


	)

22 
	#__°ub_nfs£rv˘l


	)

23 
	#__°ub_putmsg


	)

24 
	#__°ub_ªvoke


	)

25 
	#__°ub_£éogö


	)

26 
	#__°ub_sigªtu∫


	)

27 
	#__°ub_s°k


	)

28 
	#__°ub_°ty


	)

	@/usr/include/sys/select.h

21 #i‚de‡
_SYS_SELECT_H


22 
	#_SYS_SELECT_H
 1

	)

24 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

30 
	~<bôs/£À˘.h
>

33 
	~<bôs/sig£t.h
>

35 #i‚de‡
__sig£t_t_deföed


36 
	#__sig£t_t_deföed


	)

37 
__sig£t_t
 
	tsig£t_t
;

41 
	#__√ed_time_t


	)

42 
	#__√ed_time•ec


	)

43 
	~<time.h
>

44 
	#__√ed_timevÆ


	)

45 
	~<bôs/time.h
>

47 #i‚de‡
__su£c⁄ds_t_deföed


48 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

49 
	#__su£c⁄ds_t_deföed


	)

54 
	t__fd_mask
;

57 #unde‡
__NFDBITS


59 
	#__NFDBITS
 (8 * (Ë (
__fd_mask
))

	)

60 
	#__FD_ELT
(
d
Ë((dË/ 
__NFDBITS
)

	)

61 
	#__FD_MASK
(
d
Ë((
__fd_mask
Ë(1UL << ((dË% 
__NFDBITS
)))

	)

68 #ifde‡
__USE_XOPEN


69 
__fd_mask
 
	mfds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

70 
	#__FDS_BITS
(
£t
Ë((£t)->
fds_bôs
)

	)

72 
__fd_mask
 
	m__fds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

73 
	#__FDS_BITS
(
£t
Ë((£t)->
__fds_bôs
)

	)

75 } 
	tfd_£t
;

78 
	#FD_SETSIZE
 
__FD_SETSIZE


	)

80 #ifde‡
__USE_MISC


82 
__fd_mask
 
	tfd_mask
;

85 
	#NFDBITS
 
__NFDBITS


	)

90 
	#FD_SET
(
fd
, 
fd£ç
Ë
	`__FD_SET
 (fd, fd£ç)

	)

91 
	#FD_CLR
(
fd
, 
fd£ç
Ë
	`__FD_CLR
 (fd, fd£ç)

	)

92 
	#FD_ISSET
(
fd
, 
fd£ç
Ë
	`__FD_ISSET
 (fd, fd£ç)

	)

93 
	#FD_ZERO
(
fd£ç
Ë
	`__FD_ZERO
 (fd£ç)

	)

96 
__BEGIN_DECLS


106 
£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

107 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

108 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

109 
timevÆ
 *
__ª°ri˘
 
__timeout
);

111 #ifde‡
__USE_XOPEN2K


118 
p£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

119 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

120 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

121 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
,

122 c⁄° 
__sig£t_t
 *
__ª°ri˘
 
__sigmask
);

127 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__GNUC__


128 
	~<bôs/£À˘2.h
>

131 
	g__END_DECLS


	@/usr/include/sys/sysmacros.h

19 #i‚de‡
_SYS_SYSMACROS_H


20 
	#_SYS_SYSMACROS_H
 1

	)

22 
	~<„©uªs.h
>

24 
__BEGIN_DECLS


26 
__exãnsi⁄__


27 
	$gnu_dev_maj‹
 (
__dev
)

28 
__THROW
 
__©åibuã_c⁄°__
;

29 
__exãnsi⁄__


30 
	$gnu_dev_mö‹
 (
__dev
)

31 
__THROW
 
__©åibuã_c⁄°__
;

32 
__exãnsi⁄__


33 
	$gnu_dev_makedev
 (
__maj‹
,

34 
__mö‹
)

35 
__THROW
 
__©åibuã_c⁄°__
;

37 #ifde‡
__USE_EXTERN_INLINES


38 
__exãnsi⁄__
 
__exã∫_ölöe
 
__©åibuã_c⁄°__
 

39 
	`__NTH
 (
	$gnu_dev_maj‹
 (
__dev
))

41  ((
__dev
 >> 8) & 0xfff) | (() (__dev >> 32) & ~0xfff);

42 
	}
}

44 
__exãnsi⁄__
 
__exã∫_ölöe
 
__©åibuã_c⁄°__
 

45 
__NTH
 (
	$gnu_dev_mö‹
 (
__dev
))

47  (
__dev
 & 0xff) | (() (__dev >> 12) & ~0xff);

48 
	}
}

50 
__exãnsi⁄__
 
__exã∫_ölöe
 
__©åibuã_c⁄°__
 

51 
__NTH
 (
	$gnu_dev_makedev
 (
__maj‹
, 
__mö‹
))

53  ((
__mö‹
 & 0xffË| ((
__maj‹
 & 0xfff) << 8)

54 | (((Ë(
__mö‹
 & ~0xff)) << 12)

55 | (((Ë(
__maj‹
 & ~0xfff)) << 32));

56 
	}
}

58 
	g__END_DECLS


61 
	#maj‹
(
dev
Ë
	`gnu_dev_maj‹
 (dev)

	)

62 
	#mö‹
(
dev
Ë
	`gnu_dev_mö‹
 (dev)

	)

63 
	#makedev
(
maj
, 
mö
Ë
	`gnu_dev_makedev
 (maj, mö)

	)

	@/usr/include/time.h

22 #i‚def 
_TIME_H


24 #i‡(! 
deföed
 
__√ed_time_t
 && !deföed 
__√ed_˛ock_t
 && \

25 ! 
deföed
 
	g__√ed_time•ec
)

26 
	#_TIME_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


33 #ifdef 
_TIME_H


35 
	#__√ed_size_t


	)

36 
	#__√ed_NULL


	)

37 
	~<°ddef.h
>

41 
	~<bôs/time.h
>

44 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


45 #i‚de‡
CLK_TCK


46 
	#CLK_TCK
 
CLOCKS_PER_SEC


	)

52 #i‡!
deföed
 
__˛ock_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_˛ock_t
)

53 
	#__˛ock_t_deföed
 1

	)

55 
	~<bôs/ty≥s.h
>

57 
__BEGIN_NAMESPACE_STD


59 
__˛ock_t
 
	t˛ock_t
;

60 
	g__END_NAMESPACE_STD


61 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX


62 
	$__USING_NAMESPACE_STD
(
˛ock_t
)

66 #unde‡
__√ed_˛ock_t


68 #i‡!
deföed
 
__time_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_time_t
)

69 
	#__time_t_deföed
 1

	)

71 
	~<bôs/ty≥s.h
>

73 
__BEGIN_NAMESPACE_STD


75 
__time_t
 
	ttime_t
;

76 
__END_NAMESPACE_STD


77 #ifde‡
__USE_POSIX


78 
	$__USING_NAMESPACE_STD
(
time_t
)

82 #unde‡
__√ed_time_t


84 #i‡!
deföed
 
__˛ockid_t_deföed
 && \

85 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_˛ockid_t
)

86 
	#__˛ockid_t_deföed
 1

	)

88 
	~<bôs/ty≥s.h
>

91 
__˛ockid_t
 
	t˛ockid_t
;

94 #unde‡
__˛ockid_time_t


96 #i‡!
deföed
 
__timî_t_deföed
 && \

97 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_timî_t
)

98 
	#__timî_t_deföed
 1

	)

100 
	~<bôs/ty≥s.h
>

103 
__timî_t
 
	ttimî_t
;

106 #unde‡
__√ed_timî_t


109 #i‡(!
deföed
 
__time•ec_deföed
 \

110 && ((
deföed
 
_TIME_H
 \

111 && (
deföed
 
__USE_POSIX199309
 \

112 || 
deföed
 
__USE_ISOC11
)) \

113 || 
deföed
 
__√ed_time•ec
))

114 
	#__time•ec_deföed
 1

	)

116 
	~<bôs/ty≥s.h
>

120 
	stime•ec


122 
__time_t
 
tv_£c
;

123 
__sysˇŒ_¶⁄g_t
 
tv_n£c
;

127 #unde‡
__√ed_time•ec


130 #ifdef 
_TIME_H


131 
__BEGIN_NAMESPACE_STD


133 
	stm


135 
tm_£c
;

136 
tm_mö
;

137 
tm_hour
;

138 
tm_mday
;

139 
tm_m⁄
;

140 
tm_yór
;

141 
tm_wday
;

142 
tm_yday
;

143 
tm_isd°
;

145 #ifdef 
__USE_MISC


146 
tm_gmtoff
;

147 c⁄° *
tm_z⁄e
;

149 
__tm_gmtoff
;

150 c⁄° *
__tm_z⁄e
;

153 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX


155 
	$__USING_NAMESPACE_STD
(
tm
)

159 #ifde‡
__USE_POSIX199309


161 
	sôimî•ec


163 
time•ec
 
ô_öãrvÆ
;

164 
time•ec
 
ô_vÆue
;

168 
sigevít
;

172 #ifde‡
__USE_XOPEN2K


173 #i‚de‡
__pid_t_deföed


174 
__pid_t
 
	tpid_t
;

175 
	#__pid_t_deföed


	)

180 #ifde‡
__USE_ISOC11


182 
	#TIME_UTC
 1

	)

186 
__BEGIN_NAMESPACE_STD


189 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

192 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

195 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

196 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

199 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

205 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

206 c⁄° *
__ª°ri˘
 
__f‹m©
,

207 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

208 
__END_NAMESPACE_STD


210 #ifde‡
__USE_XOPEN


213 *
	$°Ωtime
 (c⁄° *
__ª°ri˘
 
__s
,

214 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

215 
__THROW
;

218 #ifde‡
__USE_XOPEN2K8


221 
	~<xloˇÀ.h
>

223 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

224 c⁄° *
__ª°ri˘
 
__f‹m©
,

225 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

226 
__loˇÀ_t
 
__loc
Ë
__THROW
;

229 #ifde‡
__USE_GNU


230 *
	$°Ωtime_l
 (c⁄° *
__ª°ri˘
 
__s
,

231 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

232 
__loˇÀ_t
 
__loc
Ë
__THROW
;

236 
__BEGIN_NAMESPACE_STD


239 
tm
 *
	$gmtime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

243 
tm
 *
	$loˇ…ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

244 
__END_NAMESPACE_STD


246 #ifde‡
__USE_POSIX


249 
tm
 *
	$gmtime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

250 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

254 
tm
 *
	$loˇ…ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

255 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

258 
__BEGIN_NAMESPACE_STD


261 *
	$as˘ime
 (c⁄° 
tm
 *
__ç
Ë
__THROW
;

264 *
	$˘ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

265 
__END_NAMESPACE_STD


267 #ifde‡
__USE_POSIX


272 *
	$as˘ime_r
 (c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

273 *
__ª°ri˘
 
__buf
Ë
__THROW
;

276 *
	$˘ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

277 *
__ª°ri˘
 
__buf
Ë
__THROW
;

282 *
__tz«me
[2];

283 
__daylight
;

284 
__timez⁄e
;

287 #ifdef 
__USE_POSIX


289 *
tz«me
[2];

293 
	$tz£t
 (Ë
__THROW
;

296 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


297 
daylight
;

298 
timez⁄e
;

301 #ifde‡
__USE_MISC


304 
	$°ime
 (c⁄° 
time_t
 *
__whí
Ë
__THROW
;

310 
	#__i¶óp
(
yór
) \

311 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

314 #ifde‡
__USE_MISC


319 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

322 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

325 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

329 #ifde‡
__USE_POSIX199309


334 
	`«no¶ìp
 (c⁄° 
time•ec
 *
__ªque°ed_time
,

335 
time•ec
 *
__ªmaöög
);

339 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

342 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

345 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, c⁄° 
time•ec
 *
__ç
)

346 
__THROW
;

348 #ifde‡
__USE_XOPEN2K


353 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

354 c⁄° 
time•ec
 *
__ªq
,

355 
time•ec
 *
__ªm
);

358 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

363 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

364 
sigevít
 *
__ª°ri˘
 
__evp
,

365 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

368 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

371 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

372 c⁄° 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

373 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

376 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

377 
__THROW
;

380 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

384 #ifde‡
__USE_ISOC11


386 
	$time•ec_gë
 (
time•ec
 *
__ts
, 
__ba£
)

387 
__THROW
 
	`__n⁄nuŒ
 ((1));

391 #ifde‡
__USE_XOPEN_EXTENDED


403 
gëd©e_îr
;

412 
tm
 *
	`gëd©e
 (c⁄° *
__°rög
);

415 #ifde‡
__USE_GNU


426 
	`gëd©e_r
 (c⁄° *
__ª°ri˘
 
__°rög
,

427 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

430 
__END_DECLS


	@/usr/include/bits/byteswap.h

19 #i‡!
deföed
 
_BYTESWAP_H
 && !deföed 
_NETINET_IN_H
 && !deföed 
_ENDIAN_H


23 #i‚de‡
_BITS_BYTESWAP_H


24 
	#_BITS_BYTESWAP_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

28 
	~<bôs/w‹dsize.h
>

31 
	#__bsw≠_c⁄°™t_16
(
x
) \

32 ((Ë((((
x
Ë>> 8Ë& 0xffË| (((xË& 0xffË<< 8)))

	)

35 
	~<bôs/byãsw≠-16.h
>

38 
	#__bsw≠_c⁄°™t_32
(
x
) \

39 ((((
x
) & 0xff000000) >> 24) | (((x) & 0x00ff0000) >> 8) | \

40 (((
x
Ë& 0x0000ff00Ë<< 8Ë| (((xË& 0x000000ffË<< 24))

	)

42 #ifde‡
__GNUC__


43 #i‡
__GNUC_PREREQ
 (4, 3)

44 
__ölöe
 

45 
	$__bsw≠_32
 (
__bsx
)

47  
	`__buûtö_bsw≠32
 (
__bsx
);

48 
	}
}

49 #ñi‡
__GNUC__
 >= 2

50 #i‡
__WORDSIZE
 =64 || (
deföed
 
__i486__
 || deföed 
__≥¡ium__
 \

51 || 
deföed
 
	g__≥¡ium¥o__
 || deföed 
	g__≥¡ium4__
 \

52 || 
deföed
 
	g__k8__
 || deföed 
	g__©hl⁄__
 \

53 || 
deföed
 
	g__k6__
 || deföed 
	g__noc⁄a__
 \

54 || 
deföed
 
	g__c‹e2__
 || deföed 
	g__geode__
 \

55 || 
deföed
 
	g__amdÁm10__
)

58 
	#__bsw≠_32
(
x
) \

59 (
__exãnsi⁄__
 \

60 ({ 
__v
, 
__x
 = (
x
); \

61 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

62 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

64 
	`__asm__
 ("bsw≠ %0" : "Ù" (
__v
Ë: "0" (
__x
)); \

65 
__v
; }))

	)

67 
	#__bsw≠_32
(
x
) \

68 (
__exãnsi⁄__
 \

69 ({ 
__v
, 
__x
 = (
x
); \

70 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

71 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

73 
	`__asm__
 ("rorw $8, %w0;" \

76 : "Ù" (
__v
) \

77 : "0" (
__x
) \

79 
__v
; }))

	)

82 
	#__bsw≠_32
(
x
) \

83 (
__exãnsi⁄__
 \

84 ({ 
__x
 = (
x
); 
	`__bsw≠_c⁄°™t_32
 (__x); }))

	)

87 
__ölöe
 

88 
	$__bsw≠_32
 (
__bsx
)

90  
	`__bsw≠_c⁄°™t_32
 (
__bsx
);

91 
	}
}

95 #i‡
__GNUC_PREREQ
 (2, 0)

97 
	#__bsw≠_c⁄°™t_64
(
x
) \

98 (
	`__exãnsi⁄__
 ((((
x
) & 0xff00000000000000ull) >> 56) \

99 | (((
x
) & 0x00ff000000000000ull) >> 40) \

100 | (((
x
) & 0x0000ff0000000000ull) >> 24) \

101 | (((
x
) & 0x000000ff00000000ull) >> 8) \

102 | (((
x
) & 0x00000000ff000000ull) << 8) \

103 | (((
x
) & 0x0000000000ff0000ull) << 24) \

104 | (((
x
) & 0x000000000000ff00ull) << 40) \

105 | (((
x
Ë& 0x00000000000000ffuŒË<< 56)))

	)

107 #i‡
__GNUC_PREREQ
 (4, 3)

108 
__ölöe
 
__uöt64_t


109 
	$__bsw≠_64
 (
__uöt64_t
 
__bsx
)

111  
	`__buûtö_bsw≠64
 (
__bsx
);

112 
	}
}

113 #ñi‡
__WORDSIZE
 == 64

114 
	#__bsw≠_64
(
x
) \

115 (
__exãnsi⁄__
 \

116 ({ 
__uöt64_t
 
__v
, 
__x
 = (
x
); \

117 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

118 
__v
 = 
	`__bsw≠_c⁄°™t_64
 (
__x
); \

120 
	`__asm__
 ("bsw≠ %q0" : "Ù" (
__v
Ë: "0" (
__x
)); \

121 
__v
; }))

	)

123 
	#__bsw≠_64
(
x
) \

124 (
__exãnsi⁄__
 \

125 ({ uni⁄ { 
__exãnsi⁄__
 
__uöt64_t
 
__Œ
; \

126 
__l
[2]; } 
__w
, 
__r
; \

127 i‡(
	`__buûtö_c⁄°™t_p
 (
x
)) \

128 
__r
.
__Œ
 = 
	`__bsw≠_c⁄°™t_64
 (
x
); \

131 
__w
.
__Œ
 = (
x
); \

132 
__r
.
__l
[0] = 
	`__bsw≠_32
 (
__w
.__l[1]); \

133 
__r
.
__l
[1] = 
	`__bsw≠_32
 (
__w
.__l[0]); \

135 
__r
.
__Œ
; }))

	)

138 
	#__bsw≠_c⁄°™t_64
(
x
) \

139 ((((
x
) & 0xff00000000000000ull) >> 56) \

140 | (((
x
) & 0x00ff000000000000ull) >> 40) \

141 | (((
x
) & 0x0000ff0000000000ull) >> 24) \

142 | (((
x
) & 0x000000ff00000000ull) >> 8) \

143 | (((
x
) & 0x00000000ff000000ull) << 8) \

144 | (((
x
) & 0x0000000000ff0000ull) << 24) \

145 | (((
x
) & 0x000000000000ff00ull) << 40) \

146 | (((
x
Ë& 0x00000000000000ffuŒË<< 56))

	)

148 
__ölöe
 
__uöt64_t


149 
	$__bsw≠_64
 (
__uöt64_t
 
__bsx
)

151  
	`__bsw≠_c⁄°™t_64
 (
__bsx
);

152 
	}
}

	@/usr/include/bits/endian.h

3 #i‚de‡
_ENDIAN_H


7 
	#__BYTE_ORDER
 
__LITTLE_ENDIAN


	)

	@/usr/include/bits/select.h

18 #i‚de‡
_SYS_SELECT_H


22 
	~<bôs/w‹dsize.h
>

25 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

27 #i‡
__WORDSIZE
 == 64

28 
	#__FD_ZERO_STOS
 "°osq"

	)

30 
	#__FD_ZERO_STOS
 "°o¶"

	)

33 
	#__FD_ZERO
(
fd•
) \

35 
__d0
, 
__d1
; \

36 
__asm__
 
	`__vﬁ©ûe__
 ("˛d;Ñï; " 
__FD_ZERO_STOS
 \

37 : "=c" (
__d0
), "=D" (
__d1
) \

38 : "a" (0), "0" ( (
fd_£t
) \

39 /  (
__fd_mask
)), \

40 "1" (&
	`__FDS_BITS
 (
fd•
)[0]) \

42 } 0)

	)

48 
	#__FD_ZERO
(
£t
) \

50 
__i
; \

51 
fd_£t
 *
__¨r
 = (
£t
); \

52 
__i
 = 0; __ò<  (
fd_£t
Ë/  (
__fd_mask
); ++__i) \

53 
	`__FDS_BITS
 (
__¨r
)[
__i
] = 0; \

54 } 0)

	)

58 
	#__FD_SET
(
d
, 
£t
) \

59 ((Ë(
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] |
	`__FD_MASK
 (d)))

	)

60 
	#__FD_CLR
(
d
, 
£t
) \

61 ((Ë(
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] &~
	`__FD_MASK
 (d)))

	)

62 
	#__FD_ISSET
(
d
, 
£t
) \

63 ((
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] & 
	`__FD_MASK
 (d)Ë!0)

	)

	@/usr/include/bits/select2.h

19 #i‚de‡
_SYS_SELECT_H


24 
__fdñt_chk
 (
__d
);

25 
	$__fdñt_w¨n
 (
__d
)

26 
	`__w¨«âr
 ("bit outside of fd_set selected");

27 #unde‡
__FD_ELT


28 
	#__FD_ELT
(
d
) \

29 
__exãnsi⁄__
 \

30 ({ 
__d
 = (
d
); \

31 (
	`__buûtö_c⁄°™t_p
 (
__d
) \

32 ? (0 <
__d
 && __d < 
__FD_SETSIZE
 \

33 ? (
__d
 / 
__NFDBITS
) \

34 : 
	`__fdñt_w¨n
 (
__d
)) \

35 : 
	`__fdñt_chk
 (
__d
)); 
	}
})

	)

	@/usr/include/bits/sigset.h

19 #i‚def 
_SIGSET_H_ty≥s


20 
	#_SIGSET_H_ty≥s
 1

	)

22 
	t__sig_©omic_t
;

26 
	#_SIGSET_NWORDS
 (1024 / (8 *  ()))

	)

29 
	m__vÆ
[
_SIGSET_NWORDS
];

30 } 
	t__sig£t_t
;

41 #i‡!
deföed
 
_SIGSET_H_‚s
 && deföed 
_SIGNAL_H


42 
	#_SIGSET_H_‚s
 1

	)

44 #i‚de‡
_EXTERN_INLINE


45 
	#_EXTERN_INLINE
 
__exã∫_ölöe


	)

49 
	#__sigmask
(
sig
) \

50 (((Ë1Ë<< (((
sig
Ë- 1Ë% (8 *  ())))

	)

53 
	#__sigw‹d
(
sig
Ë(((sigË- 1Ë/ (8 *  ()))

	)

55 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

56 
	#__sigem±y£t
(
£t
) \

57 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

58 
sig£t_t
 *
__£t
 = (
£t
); \

59 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = 0; \

60 0; }))

	)

61 
	#__sigfûl£t
(
£t
) \

62 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

63 
sig£t_t
 *
__£t
 = (
£t
); \

64 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = ~0UL; \

65 0; }))

	)

67 #ifde‡
__USE_GNU


71 
	#__sigi£m±y£t
(
£t
) \

72 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

73 c⁄° 
sig£t_t
 *
__£t
 = (
£t
); \

74 
__ªt
 = 
__£t
->
__vÆ
[--
__˙t
]; \

75 !
__ªt
 && --
__˙t
 >= 0) \

76 
__ªt
 = 
__£t
->
__vÆ
[
__˙t
]; \

77 
__ªt
 =0; }))

	)

78 
	#__sig™d£t
(
de°
, 
À·
, 
right
) \

79 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

80 
sig£t_t
 *
__de°
 = (
de°
); \

81 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

82 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

83 --
__˙t
 >= 0) \

84 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

85 & 
__right
->
__vÆ
[
__˙t
]); \

86 0; }))

	)

87 
	#__sig‹£t
(
de°
, 
À·
, 
right
) \

88 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

89 
sig£t_t
 *
__de°
 = (
de°
); \

90 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

91 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

92 --
__˙t
 >= 0) \

93 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

94 | 
__right
->
__vÆ
[
__˙t
]); \

95 0; }))

	)

102 
__sigismembî
 (c⁄° 
__sig£t_t
 *, );

103 
__sigadd£t
 (
__sig£t_t
 *, );

104 
__sigdñ£t
 (
__sig£t_t
 *, );

106 #ifde‡
__USE_EXTERN_INLINES


107 
	#__SIGSETFN
(
NAME
, 
BODY
, 
CONST
) \

108 
_EXTERN_INLINE
 \

109 
	`NAME
 (
CONST
 
__sig£t_t
 *
__£t
, 
__sig
) \

111 
__mask
 = 
	`__sigmask
 (
__sig
); \

112 
__w‹d
 = 
	`__sigw‹d
 (
__sig
); \

113  
BODY
; \

114 }

	)

116 
__SIGSETFN
 (
__sigismembî
, (
__£t
->
__vÆ
[
__w‹d
] & 
__mask
) ? 1 : 0, const)

117 
__SIGSETFN
 (
__sigadd£t
, ((
__£t
->
__vÆ
[
__w‹d
] |
__mask
), 0), )

118 
__SIGSETFN
 (
__sigdñ£t
, ((
__£t
->
__vÆ
[
__w‹d
] &~
__mask
), 0), )

120 #unde‡
__SIGSETFN


	@/usr/include/bits/time.h

23 #i‡
deföed
 
__√ed_timevÆ
 || deföed 
__USE_GNU


24 #i‚de‡
_STRUCT_TIMEVAL


25 
	#_STRUCT_TIMEVAL
 1

	)

26 
	~<bôs/ty≥s.h
>

30 
	stimevÆ


32 
__time_t
 
	mtv_£c
;

33 
__su£c⁄ds_t
 
	mtv_u£c
;

38 #i‚de‡
__√ed_timevÆ


39 #i‚de‡
_BITS_TIME_H


40 
	#_BITS_TIME_H
 1

	)

48 
	#CLOCKS_PER_SEC
 ((
˛ock_t
Ë1000000)

	)

50 #i‡(!
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_POSIX
) \

51 && !
deföed
 
	g__USE_XOPEN2K


54 
	~<bôs/ty≥s.h
>

55 
__sysc⁄f
 ();

56 
	#CLK_TCK
 ((
__˛ock_t
Ë
	`__sysc⁄f
 (2)Ë

	)

59 #ifde‡
__USE_POSIX199309


61 
	#CLOCK_REALTIME
 0

	)

63 
	#CLOCK_MONOTONIC
 1

	)

65 
	#CLOCK_PROCESS_CPUTIME_ID
 2

	)

67 
	#CLOCK_THREAD_CPUTIME_ID
 3

	)

69 
	#CLOCK_MONOTONIC_RAW
 4

	)

71 
	#CLOCK_REALTIME_COARSE
 5

	)

73 
	#CLOCK_MONOTONIC_COARSE
 6

	)

75 
	#CLOCK_BOOTTIME
 7

	)

77 
	#CLOCK_REALTIME_ALARM
 8

	)

79 
	#CLOCK_BOOTTIME_ALARM
 9

	)

81 
	#CLOCK_TAI
 11

	)

84 
	#TIMER_ABSTIME
 1

	)

87 #ifde‡
__USE_GNU


88 
	~<bôs/timex.h
>

90 
__BEGIN_DECLS


93 
	$˛ock_adjtime
 (
__˛ockid_t
 
__˛ock_id
, 
timex
 *
__utx
Ë
__THROW
;

95 
__END_DECLS


101 #unde‡
__√ed_timevÆ


	@/usr/include/bits/typesizes.h

19 #i‚de‡
_BITS_TYPES_H


23 #i‚def 
_BITS_TYPESIZES_H


24 
	#_BITS_TYPESIZES_H
 1

	)

30 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


31 
	#__SYSCALL_SLONG_TYPE
 
__SQUAD_TYPE


	)

32 
	#__SYSCALL_ULONG_TYPE
 
__UQUAD_TYPE


	)

34 
	#__SYSCALL_SLONG_TYPE
 
__SLONGWORD_TYPE


	)

35 
	#__SYSCALL_ULONG_TYPE
 
__ULONGWORD_TYPE


	)

38 
	#__DEV_T_TYPE
 
__UQUAD_TYPE


	)

39 
	#__UID_T_TYPE
 
__U32_TYPE


	)

40 
	#__GID_T_TYPE
 
__U32_TYPE


	)

41 
	#__INO_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

42 
	#__INO64_T_TYPE
 
__UQUAD_TYPE


	)

43 
	#__MODE_T_TYPE
 
__U32_TYPE


	)

44 #ifde‡
__x86_64__


45 
	#__NLINK_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

46 
	#__FSWORD_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

48 
	#__NLINK_T_TYPE
 
__UWORD_TYPE


	)

49 
	#__FSWORD_T_TYPE
 
__SWORD_TYPE


	)

51 
	#__OFF_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

52 
	#__OFF64_T_TYPE
 
__SQUAD_TYPE


	)

53 
	#__PID_T_TYPE
 
__S32_TYPE


	)

54 
	#__RLIM_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

55 
	#__RLIM64_T_TYPE
 
__UQUAD_TYPE


	)

56 
	#__BLKCNT_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

57 
	#__BLKCNT64_T_TYPE
 
__SQUAD_TYPE


	)

58 
	#__FSBLKCNT_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

59 
	#__FSBLKCNT64_T_TYPE
 
__UQUAD_TYPE


	)

60 
	#__FSFILCNT_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

61 
	#__FSFILCNT64_T_TYPE
 
__UQUAD_TYPE


	)

62 
	#__ID_T_TYPE
 
__U32_TYPE


	)

63 
	#__CLOCK_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

64 
	#__TIME_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

65 
	#__USECONDS_T_TYPE
 
__U32_TYPE


	)

66 
	#__SUSECONDS_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

67 
	#__DADDR_T_TYPE
 
__S32_TYPE


	)

68 
	#__KEY_T_TYPE
 
__S32_TYPE


	)

69 
	#__CLOCKID_T_TYPE
 
__S32_TYPE


	)

70 
	#__TIMER_T_TYPE
 *

	)

71 
	#__BLKSIZE_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

72 
	#__FSID_T_TYPE
 såu˘ { 
__vÆ
[2]; }

	)

73 
	#__SSIZE_T_TYPE
 
__SWORD_TYPE


	)

74 
	#__CPU_MASK_TYPE
 
__SYSCALL_ULONG_TYPE


	)

76 #ifde‡
__x86_64__


80 
	#__OFF_T_MATCHES_OFF64_T
 1

	)

83 
	#__INO_T_MATCHES_INO64_T
 1

	)

87 
	#__FD_SETSIZE
 1024

	)

	@/usr/include/bits/byteswap-16.h

19 #i‚de‡
_BITS_BYTESWAP_H


23 #ifde‡
__GNUC__


24 #i‡
__GNUC__
 >= 2

25 
	#__bsw≠_16
(
x
) \

26 (
__exãnsi⁄__
 \

27 ({ 
__v
, 
__x
 = (Ë(
x
); \

28 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

29 
__v
 = 
	`__bsw≠_c⁄°™t_16
 (
__x
); \

31 
	`__asm__
 ("rorw $8, %w0" \

32 : "Ù" (
__v
) \

33 : "0" (
__x
) \

35 
__v
; }))

	)

38 
	#__bsw≠_16
(
x
) \

39 (
__exãnsi⁄__
 \

40 ({ 
__x
 = (Ë(
x
); \

41 
	`__bsw≠_c⁄°™t_16
 (
__x
); }))

	)

44 
__ölöe
 

45 
	$__bsw≠_16
 (
__bsx
)

47  
	`__bsw≠_c⁄°™t_16
 (
__bsx
);

48 
	}
}

	@/usr/include/bits/timex.h

18 #i‚def 
_BITS_TIMEX_H


19 
	#_BITS_TIMEX_H
 1

	)

21 
	~<bôs/ty≥s.h
>

25 
	stimex


27 
	mmodes
;

28 
__sysˇŒ_¶⁄g_t
 
	moff£t
;

29 
__sysˇŒ_¶⁄g_t
 
	m‰eq
;

30 
__sysˇŒ_¶⁄g_t
 
	mmaxîr‹
;

31 
__sysˇŒ_¶⁄g_t
 
	me°îr‹
;

32 
	m°©us
;

33 
__sysˇŒ_¶⁄g_t
 
	mc⁄°™t
;

34 
__sysˇŒ_¶⁄g_t
 
	m¥ecisi⁄
;

35 
__sysˇŒ_¶⁄g_t
 
	mtﬁî™˚
;

36 
timevÆ
 
	mtime
;

37 
__sysˇŒ_¶⁄g_t
 
	mtick
;

38 
__sysˇŒ_¶⁄g_t
 
	mµs‰eq
;

39 
__sysˇŒ_¶⁄g_t
 
	mjôãr
;

40 
	mshi·
;

41 
__sysˇŒ_¶⁄g_t
 
	m°abû
;

42 
__sysˇŒ_¶⁄g_t
 
	mjô˙t
;

43 
__sysˇŒ_¶⁄g_t
 
	mˇl˙t
;

44 
__sysˇŒ_¶⁄g_t
 
	mîr˙t
;

45 
__sysˇŒ_¶⁄g_t
 
	m°b˙t
;

47 
	mèi
;

56 
	#ADJ_OFFSET
 0x0001

	)

57 
	#ADJ_FREQUENCY
 0x0002

	)

58 
	#ADJ_MAXERROR
 0x0004

	)

59 
	#ADJ_ESTERROR
 0x0008

	)

60 
	#ADJ_STATUS
 0x0010

	)

61 
	#ADJ_TIMECONST
 0x0020

	)

62 
	#ADJ_TAI
 0x0080

	)

63 
	#ADJ_SETOFFSET
 0x0100

	)

64 
	#ADJ_MICRO
 0x1000

	)

65 
	#ADJ_NANO
 0x2000

	)

66 
	#ADJ_TICK
 0x4000

	)

67 
	#ADJ_OFFSET_SINGLESHOT
 0x8001

	)

68 
	#ADJ_OFFSET_SS_READ
 0xa001

	)

71 
	#MOD_OFFSET
 
ADJ_OFFSET


	)

72 
	#MOD_FREQUENCY
 
ADJ_FREQUENCY


	)

73 
	#MOD_MAXERROR
 
ADJ_MAXERROR


	)

74 
	#MOD_ESTERROR
 
ADJ_ESTERROR


	)

75 
	#MOD_STATUS
 
ADJ_STATUS


	)

76 
	#MOD_TIMECONST
 
ADJ_TIMECONST


	)

77 
	#MOD_CLKB
 
ADJ_TICK


	)

78 
	#MOD_CLKA
 
ADJ_OFFSET_SINGLESHOT


	)

79 
	#MOD_TAI
 
ADJ_TAI


	)

80 
	#MOD_MICRO
 
ADJ_MICRO


	)

81 
	#MOD_NANO
 
ADJ_NANO


	)

85 
	#STA_PLL
 0x0001

	)

86 
	#STA_PPSFREQ
 0x0002

	)

87 
	#STA_PPSTIME
 0x0004

	)

88 
	#STA_FLL
 0x0008

	)

90 
	#STA_INS
 0x0010

	)

91 
	#STA_DEL
 0x0020

	)

92 
	#STA_UNSYNC
 0x0040

	)

93 
	#STA_FREQHOLD
 0x0080

	)

95 
	#STA_PPSSIGNAL
 0x0100

	)

96 
	#STA_PPSJITTER
 0x0200

	)

97 
	#STA_PPSWANDER
 0x0400

	)

98 
	#STA_PPSERROR
 0x0800

	)

100 
	#STA_CLOCKERR
 0x1000

	)

101 
	#STA_NANO
 0x2000

	)

102 
	#STA_MODE
 0x4000

	)

103 
	#STA_CLK
 0x8000

	)

106 
	#STA_RONLY
 (
STA_PPSSIGNAL
 | 
STA_PPSJITTER
 | 
STA_PPSWANDER
 | \

107 
STA_PPSERROR
 | 
STA_CLOCKERR
 | 
STA_NANO
 | 
STA_MODE
 | 
STA_CLK
)

	)

	@
1
.
1
/usr/include
47
1111
eeprom_rw.c
i2c.c
i2c.h
i2c_dma.c
i2c_eep_rw.c
i2c_eep_rw1.c
i2c_eep_rw2.c
i2c_eeprom_rw.c
i2c_eeprom_write.c
i2c_eeprom_write_1byte.c
write_data.h
../DMA/dma.h
/usr/include/stdint.h
/usr/include/bits/wchar.h
/usr/include/bits/wordsize.h
/usr/include/features.h
/usr/include/stdlib.h
/usr/include/alloca.h
/usr/include/bits/stdlib-bsearch.h
/usr/include/bits/stdlib-float.h
/usr/include/bits/stdlib-ldbl.h
/usr/include/bits/stdlib.h
/usr/include/bits/waitflags.h
/usr/include/bits/waitstatus.h
/usr/include/gnu/stubs.h
/usr/include/stdc-predef.h
/usr/include/sys/cdefs.h
/usr/include/sys/types.h
/usr/include/xlocale.h
/usr/include/bits/pthreadtypes.h
/usr/include/bits/types.h
/usr/include/endian.h
/usr/include/gnu/stubs-32.h
/usr/include/gnu/stubs-64.h
/usr/include/gnu/stubs-x32.h
/usr/include/sys/select.h
/usr/include/sys/sysmacros.h
/usr/include/time.h
/usr/include/bits/byteswap.h
/usr/include/bits/endian.h
/usr/include/bits/select.h
/usr/include/bits/select2.h
/usr/include/bits/sigset.h
/usr/include/bits/time.h
/usr/include/bits/typesizes.h
/usr/include/bits/byteswap-16.h
/usr/include/bits/timex.h
